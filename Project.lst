Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/13/18 18:58:25
main.asm						     Page 1 - 1


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				INCLUDE UtilProcedures.inc
			      C UTIL_SetColor PROTO
			      C UTIL_ReadString PROTO
			      C 
				INCLUDE ByteVector.inc
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C ByteVector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  0000		      C   VectorSize WORD 0
 00000006  0004		      C   VectorCapacity WORD 4
			      C ByteVector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C BV_CreateObj PROTO
			      C BV_MakeCopy PROTO
			      C BV_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C BV_PushBack PROTO
			      C BV_At PROTO
			      C BV_Swap PROTO
			      C BV_Pop PROTO
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _BV_Initialize
			      C ; _BV_IncreaseCapacity
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C 
			      C 
			      C 
				INCLUDE Board.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000007		      C Board STRUCT
 00000000  00000000	      C   VectorPtr DWORD 0
 00000004  00		      C 	ZeroPos BYTE 0
 00000005  00		      C 	DirLock BYTE 0
 00000006  00		      C 	Distance BYTE 0
			      C Board ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Board Instances
			      C B_CreateObj PROTO
			      C B_MakeCopy PROTO
			      C B_DeleteObj PROTO
			      C B_SetupBoard PROTO
			      C 
			      C ; Board Methods
			      C B_SwapUp PROTO
			      C B_SwapRight PROTO
			      C B_SwapDown PROTO
			      C B_SwapLeft PROTO
			      C B_PrintBoard PROTO
			      C 
			      C ; File Methods
			      C B_ReadFile PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _B_FindZeroPos
			      C ; _B_CalcDistance
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; DirLock Directions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 = 00000001		      C DIR_UP = 1
 = 00000002		      C DIR_RIGHT = 2
 = 00000003		      C DIR_DOWN = 3
 = 00000004		      C DIR_LEFT = 4
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; ByteVector.inc
			      C 
			      C 
			      C 

 00000000			.DATA

 = 00000064			MAX_STR_LENGTH = 100
 00000000  00000065 [		filename BYTE MAX_STR_LENGTH+1 DUP (?)
	    00
	   ]

 = 00000001			USER_INPUT_LENGTH = 1
 00000065  00000002 [		userInput BYTE USER_INPUT_LENGTH+1 DUP (?)
	    00
	   ]

 00000067 00000000		GameBoardPtr DWORD ?

 00000000			.CODE

 00000000			main PROC

 00000000  E8 00000000 E	  call UTIL_SetColor

 00000005  E8 000000B3			call PrintTitleLogo

 0000000A  E8 000000D1			call PrintStartMenu
 0000000F  E8 000000EF			call ProcessStartUserInput
					.IF (eax == 1)
 00000014  83 F8 01	   *	    cmp    eax, 001h
 00000017  75 09	   *	    jne    @C0001
 00000019				  STARTNEWGAME:
 00000019  E8 0000012F			  call ProcessFilenameInput
 0000001E  EB 0C				jmp BOARDCREATED
					.ELSEIF (eax == 2)
 00000020  EB 0A	   *	    jmp    @C0003
 00000022		   *@C0001:
 00000022  83 F8 02	   *	    cmp    eax, 002h
 00000025  75 05	   *	    jne    @C0004
 00000027  E9 0000008A			  jmp quit
					.ENDIF
 0000002C		   *@C0004:
 0000002C		   *@C0003:

 0000002C				BOARDCREATED:
 0000002C  A3 00000067 R		mov GameBoardPtr, eax

 00000031				GAMELOOP:
 00000031  E8 00000000 E		  call CLRSCR
 00000036  FF 35 00000067 R		  push GameBoardPtr
 0000003C  E8 00000000 E			call B_PrintBoard

 00000041  E8 00000146			  call PrintGameMenu
 00000046  E8 000001B9				call ProcessGameUserInput
						.IF (eax == 1)
 0000004B  83 F8 01	   *	    cmp    eax, 001h
 0000004E  75 04	   *	    jne    @C0006
 00000050  EB C7					jmp STARTNEWGAME
						.ELSEIF (eax == 2)
 00000052  EB 60	   *	    jmp    @C0008
 00000054		   *@C0006:
 00000054  83 F8 02	   *	    cmp    eax, 002h
 00000057  75 04	   *	    jne    @C0009
 00000059  EB D6					jmp GAMELOOP
						.ELSEIF (eax == 3)
 0000005B  EB 57	   *	    jmp    @C000B
 0000005D		   *@C0009:
 0000005D  83 F8 03	   *	    cmp    eax, 003h
 00000060  75 0F	   *	    jne    @C000C
 00000062  FF 35 00000067 R			  push GameBoardPtr
 00000068  E8 00000000 E				call B_SwapUp
 0000006D  EB C2					jmp GAMELOOP
						.ELSEIF (eax == 4)
 0000006F  EB 43	   *	    jmp    @C000E
 00000071		   *@C000C:
 00000071  83 F8 04	   *	    cmp    eax, 004h
 00000074  75 0F	   *	    jne    @C000F
 00000076  FF 35 00000067 R			  push GameBoardPtr
 0000007C  E8 00000000 E				call B_SwapDown
 00000081  EB AE					jmp GAMELOOP
						.ELSEIF (eax == 5)
 00000083  EB 2F	   *	    jmp    @C0011
 00000085		   *@C000F:
 00000085  83 F8 05	   *	    cmp    eax, 005h
 00000088  75 0F	   *	    jne    @C0012
 0000008A  FF 35 00000067 R			  push GameBoardPtr
 00000090  E8 00000000 E				call B_SwapLeft
 00000095  EB 9A					jmp GAMELOOP
						.ELSEIF (eax == 6)
 00000097  EB 1B	   *	    jmp    @C0014
 00000099		   *@C0012:
 00000099  83 F8 06	   *	    cmp    eax, 006h
 0000009C  75 0F	   *	    jne    @C0015
 0000009E  FF 35 00000067 R			  push GameBoardPtr
 000000A4  E8 00000000 E				call B_SwapRight
 000000A9  EB 86					jmp GAMELOOP
						.ELSEIF (eax == 7)
 000000AB  EB 07	   *	    jmp    @C0017
 000000AD		   *@C0015:
 000000AD  83 F8 07	   *	    cmp    eax, 007h
 000000B0  75 02	   *	    jne    @C0018
 000000B2  EB 02					jmp quit
						.ENDIF
 000000B4		   *@C0018:
 000000B4		   *@C0017:
 000000B4		   *@C0014:
 000000B4		   *@C0011:
 000000B4		   *@C000E:
 000000B4		   *@C000B:
 000000B4		   *@C0008:
						
 000000B4				ENDGAMELOOP:

 000000B4  EB 00			jmp quit
 000000B6				WIN:

 000000B6			  quit:
				  EXIT
 000000B6  6A 00	   *	    push   +000000000h
 000000B8  E8 00000000 E   *	    call   ExitProcess
 000000BD			main ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000000BD			PrintTitleLogo PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "WELCOME TO THE MASM SLIDING PUZZLE"
 0000006B		     2		.data		
 0000006B 57 45 4C 43 4F     2		??0000 BYTE "WELCOME TO THE MASM SLIDING PUZZLE",0	
	   4D 45 20 54 4F
	   20 54 48 45 20
	   4D 41 53 4D 20
	   53 4C 49 44 49
	   4E 47 20 50 55
	   5A 5A 4C 45 00
 000000BD		     2		.code
 000000BD  52		     2		push	edx
 000000BE  BA 0000006B R     2		mov	edx,OFFSET ??0000
 000000C3  E8 00000000 E     2		call	WriteString
 000000C8  5A		     2		pop	edx
 000000C9  E8 00000000 E     1		call	Crlf
					mWriteLn "----------------------------------"
 0000008E		     2		.data		
 0000008E 2D 2D 2D 2D 2D     2		??0001 BYTE "----------------------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000000CE		     2		.code
 000000CE  52		     2		push	edx
 000000CF  BA 0000008E R     2		mov	edx,OFFSET ??0001
 000000D4  E8 00000000 E     2		call	WriteString
 000000D9  5A		     2		pop	edx
 000000DA  E8 00000000 E     1		call	Crlf
 000000DF  C3				RET
 000000E0			PrintTitleLogo ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000000E0			PrintStartMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 000000B1		     2		.data		
 000000B1 61 29 20 53 74     2		??0002 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 000000E0		     2		.code
 000000E0  52		     2		push	edx
 000000E1  BA 000000B1 R     2		mov	edx,OFFSET ??0002
 000000E6  E8 00000000 E     2		call	WriteString
 000000EB  5A		     2		pop	edx
 000000EC  E8 00000000 E     1		call	Crlf
					mWriteLn "b) End Game (E)"
 000000C7		     2		.data		
 000000C7 62 29 20 45 6E     2		??0003 BYTE "b) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000000F1		     2		.code
 000000F1  52		     2		push	edx
 000000F2  BA 000000C7 R     2		mov	edx,OFFSET ??0003
 000000F7  E8 00000000 E     2		call	WriteString
 000000FC  5A		     2		pop	edx
 000000FD  E8 00000000 E     1		call	Crlf
 00000102  C3				RET 
 00000103			PrintStartMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000103			ProcessStartUserInput PROC uses edx
				; @returns EAX - 1: S, 2: E
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 00000103  52		   *	    push   edx
 00000104			  INPUTSTART:
 00000104  BA 00000065 R		mov edx, OFFSET userInput
 00000109  6A 01			push USER_INPUT_LENGTH
 0000010B  52				push edx
 0000010C  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 00000111  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 00000114  83 F8 5B	   *	    cmp    eax, 05Bh
 00000117  72 03	   *	    jb	@C001A
 00000119  83 E8 20			  sub eax, 32
					.ENDIF
 0000011C		   *@C001A:

					.IF (eax == 83) ; S
 0000011C  83 F8 53	   *	    cmp    eax, 053h
 0000011F  75 09	   *	    jne    @C001C
 00000121  B8 00000001			  mov eax, 1
 00000126  EB 23				jmp QUIT
					.ELSEIF (eax == 69) ; E
 00000128  EB 21	   *	    jmp    @C001E
 0000012A		   *@C001C:
 0000012A  83 F8 45	   *	    cmp    eax, 045h
 0000012D  75 09	   *	    jne    @C001F
 0000012F  B8 00000002			  mov eax, 2
 00000134  EB 15			  jmp QUIT
					.ELSE
 00000136  EB 13	   *	    jmp    @C0021
 00000138		   *@C001F:
					  mWriteLn "Invalid Input! Try again: "
 000000D7		     2		.data		
 000000D7 49 6E 76 61 6C     2		??0004 BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 00000138		     2		.code
 00000138  52		     2		push	edx
 00000139  BA 000000D7 R     2		mov	edx,OFFSET ??0004
 0000013E  E8 00000000 E     2		call	WriteString
 00000143  5A		     2		pop	edx
 00000144  E8 00000000 E     1		call	Crlf
 00000149  EB B9				jmp INPUTSTART
					.ENDIF
 0000014B		   *@C0021:
 0000014B		   *@C001E:

 0000014B				QUIT:
					RET
 0000014B  5A		   *	    pop    edx
 0000014C  C3		   *	    ret    00000h
 0000014D			ProcessStartUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000014D			ProcessFilenameInput PROC uses edx
				; Asks for filename, and creates an board object if exists
				; @return eax - Pointer to board instance
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000014D  52		   *	    push   edx
 0000014E			  INPUTSTART:
					mWrite "Name of file to open? : "
 000000F2		     1		.data		
 000000F2 4E 61 6D 65 20     1		??0005 BYTE "Name of file to open? : ",0	
	   6F 66 20 66 69
	   6C 65 20 74 6F
	   20 6F 70 65 6E
	   3F 20 3A 20 00
 0000014E		     1		.code
 0000014E  52		     1		push	edx
 0000014F  BA 000000F2 R     1		mov	edx,OFFSET ??0005
 00000154  E8 00000000 E     1		call	WriteString
 00000159  5A		     1		pop	edx
 0000015A  BA 00000000 R		mov edx, OFFSET filename

 0000015F  6A 64			push MAX_STR_LENGTH
 00000161  52				push edx
 00000162  E8 00000000 E		call UTIL_ReadString
 00000167  E8 00000000 E		call CRLF

					; Create board object and save in stack
 0000016C  E8 00000000 E		call B_CreateObj
 00000171  50				push eax 

 00000172  BA 00000000 R		mov edx, OFFSET filename
 00000177  52				push edx
 00000178  50				push eax
 00000179  E8 00000000 E		call B_ReadFile
					
					; If failed the read file, delete the created object
					.IF (eax == 0) 
 0000017E  0B C0	   *	    or	eax, eax
 00000180  75 07	   *	    jne    @C0022
 00000182  E8 00000000 E			call B_DeleteObj
 00000187  EB C5				jmp INPUTSTART
					.ENDIF
 00000189		   *@C0022:
					
 00000189  58				pop eax

 0000018A				QUIT:
					RET
 0000018A  5A		   *	    pop    edx
 0000018B  C3		   *	    ret    00000h
 0000018C			ProcessFilenameInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000018C			PrintGameMenu PROC 
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 0000010B		     2		.data		
 0000010B 61 29 20 53 74     2		??0006 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 0000018C		     2		.code
 0000018C  52		     2		push	edx
 0000018D  BA 0000010B R     2		mov	edx,OFFSET ??0006
 00000192  E8 00000000 E     2		call	WriteString
 00000197  5A		     2		pop	edx
 00000198  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Print Map (P)"
 00000121		     2		.data		
 00000121 62 29 20 50 72     2		??0007 BYTE "b) Print Map (P)",0	
	   69 6E 74 20 4D
	   61 70 20 28 50
	   29 00
 0000019D		     2		.code
 0000019D  52		     2		push	edx
 0000019E  BA 00000121 R     2		mov	edx,OFFSET ??0007
 000001A3  E8 00000000 E     2		call	WriteString
 000001A8  5A		     2		pop	edx
 000001A9  E8 00000000 E     1		call	Crlf
					mWriteLn "c) Move Up (U)"
 00000132		     2		.data		
 00000132 63 29 20 4D 6F     2		??0008 BYTE "c) Move Up (U)",0	
	   76 65 20 55 70
	   20 28 55 29 00
 000001AE		     2		.code
 000001AE  52		     2		push	edx
 000001AF  BA 00000132 R     2		mov	edx,OFFSET ??0008
 000001B4  E8 00000000 E     2		call	WriteString
 000001B9  5A		     2		pop	edx
 000001BA  E8 00000000 E     1		call	Crlf
					mWriteLn "d) Move Down (D)"
 00000141		     2		.data		
 00000141 64 29 20 4D 6F     2		??0009 BYTE "d) Move Down (D)",0	
	   76 65 20 44 6F
	   77 6E 20 28 44
	   29 00
 000001BF		     2		.code
 000001BF  52		     2		push	edx
 000001C0  BA 00000141 R     2		mov	edx,OFFSET ??0009
 000001C5  E8 00000000 E     2		call	WriteString
 000001CA  5A		     2		pop	edx
 000001CB  E8 00000000 E     1		call	Crlf
					mWriteLn "e) Move Left (L)"
 00000152		     2		.data		
 00000152 65 29 20 4D 6F     2		??000A BYTE "e) Move Left (L)",0	
	   76 65 20 4C 65
	   66 74 20 28 4C
	   29 00
 000001D0		     2		.code
 000001D0  52		     2		push	edx
 000001D1  BA 00000152 R     2		mov	edx,OFFSET ??000A
 000001D6  E8 00000000 E     2		call	WriteString
 000001DB  5A		     2		pop	edx
 000001DC  E8 00000000 E     1		call	Crlf
					mWriteLn "f) Move Right (R)"
 00000163		     2		.data		
 00000163 66 29 20 4D 6F     2		??000B BYTE "f) Move Right (R)",0	
	   76 65 20 52 69
	   67 68 74 20 28
	   52 29 00
 000001E1		     2		.code
 000001E1  52		     2		push	edx
 000001E2  BA 00000163 R     2		mov	edx,OFFSET ??000B
 000001E7  E8 00000000 E     2		call	WriteString
 000001EC  5A		     2		pop	edx
 000001ED  E8 00000000 E     1		call	Crlf
					mWriteLn "g) End Game (E)"
 00000175		     2		.data		
 00000175 67 29 20 45 6E     2		??000C BYTE "g) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000001F2		     2		.code
 000001F2  52		     2		push	edx
 000001F3  BA 00000175 R     2		mov	edx,OFFSET ??000C
 000001F8  E8 00000000 E     2		call	WriteString
 000001FD  5A		     2		pop	edx
 000001FE  E8 00000000 E     1		call	Crlf
 00000203  C3				RET 
 00000204			PrintGameMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000204			ProcessGameUserInput PROC uses edx
				; @returns EAX -
				;  1: S	 | 3: U	 | 5: L	 | 7: E
				;  2: P	 | 4: D	 | 6: R  |
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000204  52		   *	    push   edx
 00000205			  INPUTSTART:
 00000205  BA 00000065 R		mov edx, OFFSET userInput
 0000020A  6A 01			push USER_INPUT_LENGTH
 0000020C  52				push edx
 0000020D  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 00000212  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 00000215  83 F8 5B	   *	    cmp    eax, 05Bh
 00000218  72 03	   *	    jb	@C0024
 0000021A  83 E8 20			  sub eax, 32
					.ENDIF
 0000021D		   *@C0024:

					; Sets eax to a different value for each input
					.IF (eax == 83) ; S
 0000021D  83 F8 53	   *	    cmp    eax, 053h
 00000220  75 09	   *	    jne    @C0026
 00000222  B8 00000001			  mov eax, 1
 00000227  EB 6C				jmp QUIT
					.ELSEIF (eax == 80) ; P
 00000229  EB 6A	   *	    jmp    @C0028
 0000022B		   *@C0026:
 0000022B  83 F8 50	   *	    cmp    eax, 050h
 0000022E  75 09	   *	    jne    @C0029
 00000230  B8 00000002			  mov eax, 2
 00000235  EB 5E			  jmp QUIT
					.ELSEIF (eax == 85) ; U
 00000237  EB 5C	   *	    jmp    @C002B
 00000239		   *@C0029:
 00000239  83 F8 55	   *	    cmp    eax, 055h
 0000023C  75 09	   *	    jne    @C002C
 0000023E  B8 00000003			  mov eax, 3
 00000243  EB 50			  jmp QUIT
					.ELSEIF (eax == 68) ; D
 00000245  EB 4E	   *	    jmp    @C002E
 00000247		   *@C002C:
 00000247  83 F8 44	   *	    cmp    eax, 044h
 0000024A  75 09	   *	    jne    @C002F
 0000024C  B8 00000004			  mov eax, 4
 00000251  EB 42			  jmp QUIT
					.ELSEIF (eax == 76) ; L
 00000253  EB 40	   *	    jmp    @C0031
 00000255		   *@C002F:
 00000255  83 F8 4C	   *	    cmp    eax, 04Ch
 00000258  75 09	   *	    jne    @C0032
 0000025A  B8 00000005			  mov eax, 5
 0000025F  EB 34			  jmp QUIT
					.ELSEIF (eax == 82) ; R
 00000261  EB 32	   *	    jmp    @C0034
 00000263		   *@C0032:
 00000263  83 F8 52	   *	    cmp    eax, 052h
 00000266  75 09	   *	    jne    @C0035
 00000268  B8 00000006			  mov eax, 6
 0000026D  EB 26			  jmp QUIT
					.ELSEIF (eax == 69) ; E
 0000026F  EB 24	   *	    jmp    @C0037
 00000271		   *@C0035:
 00000271  83 F8 45	   *	    cmp    eax, 045h
 00000274  75 09	   *	    jne    @C0038
 00000276  B8 00000007			  mov eax, 7
 0000027B  EB 18			  jmp QUIT
					.ELSE
 0000027D  EB 16	   *	    jmp    @C003A
 0000027F		   *@C0038:
					  mWriteLn "Invalid Input! Try again: "
 00000185		     2		.data		
 00000185 49 6E 76 61 6C     2		??000D BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 0000027F		     2		.code
 0000027F  52		     2		push	edx
 00000280  BA 00000185 R     2		mov	edx,OFFSET ??000D
 00000285  E8 00000000 E     2		call	WriteString
 0000028A  5A		     2		pop	edx
 0000028B  E8 00000000 E     1		call	Crlf
 00000290  E9 FFFFFF70				jmp INPUTSTART
					.ENDIF
 00000295		   *@C003A:
 00000295		   *@C0037:
 00000295		   *@C0034:
 00000295		   *@C0031:
 00000295		   *@C002E:
 00000295		   *@C002B:
 00000295		   *@C0028:

 00000295				QUIT:
					RET
 00000295  5A		   *	    pop    edx
 00000296  C3		   *	    ret    00000h
 00000297			ProcessGameUserInput ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/13/18 18:58:25
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Board  . . . . . . . . . . . . .	 00000007
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  ZeroPos  . . . . . . . . . . .	 00000004	 Byte
  DirLock  . . . . . . . . . . .	 00000005	 Byte
  Distance . . . . . . . . . . .	 00000006	 Byte
ByteVector . . . . . . . . . . .	 00000008
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 Word
  VectorCapacity . . . . . . . .	 00000006	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001A0 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000297 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BV_At  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_MakeCopy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Pop . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_PushBack  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Swap  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_ReadFile . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SetupBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGameMenu  . . . . . . . . .	P Near	 0000018C _TEXT	Length= 00000078 Public STDCALL
PrintStartMenu . . . . . . . . .	P Near	 000000E0 _TEXT	Length= 00000023 Public STDCALL
PrintTitleLogo . . . . . . . . .	P Near	 000000BD _TEXT	Length= 00000023 Public STDCALL
ProcessFilenameInput . . . . . .	P Near	 0000014D _TEXT	Length= 0000003F Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 0000014E _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000018A _TEXT	
ProcessGameUserInput . . . . . .	P Near	 00000204 _TEXT	Length= 00000093 Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 00000205 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000295 _TEXT	
ProcessStartUserInput  . . . . .	P Near	 00000103 _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 00000104 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000014B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_ReadString  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_SetColor  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BD Public STDCALL
  STARTNEWGAME . . . . . . . . .	L Near	 00000019 _TEXT	
  BOARDCREATED . . . . . . . . .	L Near	 0000002C _TEXT	
  GAMELOOP . . . . . . . . . . .	L Near	 00000031 _TEXT	
  ENDGAMELOOP  . . . . . . . . .	L Near	 000000B4 _TEXT	
  WIN  . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000000B6 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000006B _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000008E _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000000B1 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000000C7 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000D7 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000F2 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000010B _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000121 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000132 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00000141 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000152 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000163 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00000175 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00000185 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DIR_DOWN . . . . . . . . . . . .	Number	 00000003h   
DIR_LEFT . . . . . . . . . . . .	Number	 00000004h   
DIR_RIGHT  . . . . . . . . . . .	Number	 00000002h   
DIR_UP . . . . . . . . . . . . .	Number	 00000001h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoardPtr . . . . . . . . . .	DWord	 00000067 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_LENGTH . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INPUT_LENGTH  . . . . . . .	Number	 00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000065 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
