Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 13:26:21
main.asm						     Page 1 - 1


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				INCLUDE UtilProcedures.inc
			      C UTIL_SetColor PROTO
			      C UTIL_ReadString PROTO
			      C 
				INCLUDE ByteVector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C ByteVector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  0000		      C   VectorSize WORD 0
 00000006  0004		      C   VectorCapacity WORD 4
			      C ByteVector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C BV_CreateObj PROTO
			      C BV_MakeCopy PROTO
			      C BV_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C BV_PushBack PROTO
			      C BV_At PROTO
			      C BV_Swap PROTO
			      C BV_Pop PROTO
			      C BV_Print PROTO
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _BV_Initialize
			      C ; _BV_IncreaseCapacity
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C 
			      C 
			      C 
				INCLUDE Vector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Vector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  00000000	      C   VectorSize DWORD 0
 00000008  00000004	      C   VectorCapacity DWORD 4
			      C Vector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C V_CreateObj PROTO
			      C V_MakeCopy PROTO
			      C V_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C V_PushBack PROTO
			      C V_At PROTO
			      C V_Swap PROTO
			      C V_Pop PROTO
			      C V_Print PROTO
			      C 
			      C ; Accessor Methods
			      C V_GetSize PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _V_Initialize
			      C ; _V_IncreaseCapacity
			      C 
				INCLUDE Board.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Board STRUCT
 00000000  00000000	      C   VectorPtr DWORD 0
 00000004  00		      C 	ZeroPos BYTE 0
 00000005  00		      C 	DirLock BYTE 0
 00000006  00		      C 	Distance BYTE 0
 00000007  00		      C 	Filler BYTE 0
 00000008  00000000	      C 	MoveVectorPtr DWORD 0
			      C Board ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Board Instances
			      C B_CreateObj PROTO
			      C B_MakeCopy PROTO
			      C B_DeleteObj PROTO
			      C B_SetupBoard PROTO
			      C 
			      C ; Board Methods
			      C B_SwapUp PROTO
			      C B_TestUp PROTO
			      C B_SwapRight PROTO
			      C B_TestRight PROTO
			      C B_SwapDown PROTO
			      C B_TestDown PROTO
			      C B_SwapLeft PROTO
			      C B_TestLeft PROTO
			      C B_PrintBoard PROTO
			      C B_PrintMoves PROTO
			      C B_GetDistance PROTO
			      C B_GetDirLock PROTO
			      C 
			      C ; File Methods
			      C B_ReadFile PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _B_FindZeroPos
			      C ; _B_CalcDistance
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; DirLock Directions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 = 00000001		      C DIR_UP = 1
 = 00000002		      C DIR_RIGHT = 2
 = 00000003		      C DIR_DOWN = 3
 = 00000004		      C DIR_LEFT = 4
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; ByteVector.inc
			      C 
			      C 
			      C 
				INCLUDE Pair.inc
			      C ; Pair acts as a simple dynamically allocated
			      C ; container for a board and vector objects
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C Pair STRUCT
 00000000  00000000	      C   BoardPtr DWORD ?
 00000004  00000000	      C   VectorPtr DWORD ?
			      C Pair ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; MinHeap Instances
			      C BV_CreateObj PROTO
			      C BV_MakeCopy PROTO
			      C BV_DeleteObj PROTO
			      C 
			      C ; MinHeap Methods
			      C BV_PushBack PROTO
			      C BV_At PROTO
			      C BV_Swap PROTO
			      C BV_Pop PROTO
			      C BV_Print PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C 
				INCLUDE MinHeap.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C MinHeap STRUCT
 00000000  00000000	      C   VectorPtr DWORD ?
 00000004  00000000	      C 	HeapSize DWORD 0
			      C MinHeap ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; MinHeap Instances
			      C MH_CreateObj PROTO
			      C MH_DeleteObj PROTO
			      C 
			      C ; MinHeap Methods
			      C MH_Append PROTO
			      C MH_Remove PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Private Methods
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _MH_PercolateUp
			      C ; _MH_PercolateDown
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; Vector.inc
			      C 

 00000000			.DATA

 = 00000064			MAX_STR_LENGTH = 100
 00000000  00000065 [		filename BYTE MAX_STR_LENGTH+1 DUP (?)
	    00
	   ]

 = 00000001			USER_INPUT_LENGTH = 1
 00000065  00000002 [		userInput BYTE USER_INPUT_LENGTH+1 DUP (?)
	    00
	   ]

 00000067 00000000		GameBoardPtr DWORD ?
 0000006B 00000000		numOfMoves DWORD 0

 0000006F 00000000		testmh dword ?
 00000073 00000000		b1 dword ?
 00000077 00000000		b2 dword ?
 0000007B 00000000		b3 dword ?

 00000000			.CODE

 00000000			main PROC

 00000000  E8 00000000 E	  call UTIL_SetColor

 00000005  E8 00000273			call PrintTitleLogo

 0000000A  B9 000003E8			mov ecx, 1000

 0000000F				TESTLOOP:
 0000000F  E8 00000000 E		call MH_CreateObj
 00000014  A3 0000006F R		mov testmh, eax
					
 00000019  E8 00000000 E		call B_CreateObj
 0000001E  A3 00000073 R		mov b1, eax
 00000023  6A 01		  push 1
 00000025  6A 02			push 2
 00000027  6A 03			push 3
 00000029  6A 00			push 0
 0000002B  6A 05			push 5
 0000002D  6A 06			push 6
 0000002F  6A 07			push 7
 00000031  6A 04			push 4
 00000033  6A 08			push 8
 00000035  FF 35 00000073 R		push b1
 0000003B  E8 00000000 E		call B_SetupBoard

 00000040  FF 35 00000073 R		push b1
 00000046  FF 35 0000006F R		push testmh
 0000004C  E8 00000000 E		call MH_Append

 00000051  E8 00000000 E		call B_CreateObj
 00000056  A3 00000077 R		mov b2, eax
 0000005B  6A 00		  push 0
 0000005D  6A 02			push 2
 0000005F  6A 03			push 3
 00000061  6A 04			push 4
 00000063  6A 05			push 5
 00000065  6A 06			push 6
 00000067  6A 07			push 7
 00000069  6A 08			push 8
 0000006B  6A 01			push 1
 0000006D  FF 35 00000077 R		push b2
 00000073  E8 00000000 E		call B_SetupBoard

 00000078  FF 35 00000077 R		push b2
 0000007E  FF 35 0000006F R		push testmh
 00000084  E8 00000000 E		call MH_Append

 00000089  E8 00000000 E		call B_CreateObj
 0000008E  A3 0000007B R		mov b3, eax
 00000093  6A 01		  push 1
 00000095  6A 02			push 2
 00000097  6A 03			push 3
 00000099  6A 04			push 4
 0000009B  6A 05			push 5
 0000009D  6A 06			push 6
 0000009F  6A 07			push 7
 000000A1  6A 08			push 8
 000000A3  6A 00			push 0
 000000A5  FF 35 0000007B R		push b3
 000000AB  E8 00000000 E		call B_SetupBoard

 000000B0  FF 35 0000007B R		push b3
 000000B6  FF 35 0000006F R		push testmh
 000000BC  E8 00000000 E		call MH_Append

 000000C1  FF 35 0000006F R		push testmh
 000000C7  E8 00000000 E		call MH_DeleteObj
					

 000000CC  E9 000001A5			jmp quit

				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				 ;ALL NON-DEBUG LINES BELOW
				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 000000D1				GAMESTART:
 000000D1  E8 000001CA			call PrintStartMenu
 000000D6  E8 000001E8			call ProcessStartUserInput
					.IF (eax == 1)
 000000DB  83 F8 01	   *	    cmp    eax, 001h
 000000DE  75 13	   *	    jne    @C0001
 000000E0				  STARTNEWGAME:

 000000E0  C7 05 0000006B R			mov numOfMoves, 0
	   00000000
 000000EA  E8 0000021E			  call ProcessFilenameInput
 000000EF  EB 0C				jmp BOARDCREATED

					.ELSEIF (eax == 2)
 000000F1  EB 0A	   *	    jmp    @C0003
 000000F3		   *@C0001:
 000000F3  83 F8 02	   *	    cmp    eax, 002h
 000000F6  75 05	   *	    jne    @C0004
 000000F8  E9 00000179			  jmp quit

					.ENDIF
 000000FD		   *@C0004:
 000000FD		   *@C0003:

 000000FD				BOARDCREATED:
 000000FD  A3 00000067 R		mov GameBoardPtr, eax

 00000102				GAMELOOP:
 00000102  E8 00000000 E		  call CLRSCR

 00000107  FF 05 0000006B R			inc numOfMoves

						; Check for win condition
 0000010D  FF 35 00000067 R			push GameBoardPtr
 00000113  E8 00000000 E			call B_GetDistance
						.IF (eax == 0)
 00000118  0B C0	   *	    or	eax, eax
 0000011A  75 05	   *	    jne    @C0006
 0000011C  E9 000000E8				  jmp WIN
						.ENDIF
 00000121		   *@C0006:

 00000121  EB 05				jmp ENDNONMOVEENTRY
 00000123					NONMOVEENTRY:
 00000123  E8 00000000 E			  call CLRSCR
 00000128					ENDNONMOVEENTRY:

						; Print board representation
 00000128  FF 35 00000067 R		  push GameBoardPtr
 0000012E  E8 00000000 E			call B_PrintBoard

						; Print and process selection
 00000133  E8 00000214			  call PrintGameMenu
 00000138  E8 00000287				call ProcessGameUserInput
						.IF (eax == 1)
 0000013D  83 F8 01	   *	    cmp    eax, 001h
 00000140  75 07	   *	    jne    @C0008
 00000142  EB 9C					jmp STARTNEWGAME

						.ELSEIF (eax == 2)
 00000144  E9 000000BE	   *	    jmp    @C000A
 00000149		   *@C0008:
 00000149  83 F8 02	   *	    cmp    eax, 002h
 0000014C  75 56	   *	    jne    @C000B
 0000014E  E8 00000000 E			  call CLRSCR
							mWriteLn "Your move history: "
 0000007F		     2		.data		
 0000007F 59 6F 75 72 20     2		??0000 BYTE "Your move history: ",0	
	   6D 6F 76 65 20
	   68 69 73 74 6F
	   72 79 3A 20 00
 00000153		     2		.code
 00000153  52		     2		push	edx
 00000154  BA 0000007F R     2		mov	edx,OFFSET ??0000
 00000159  E8 00000000 E     2		call	WriteString
 0000015E  5A		     2		pop	edx
 0000015F  E8 00000000 E     1		call	Crlf
							mWriteLn "-------------------"
 00000093		     2		.data		
 00000093 2D 2D 2D 2D 2D     2		??0001 BYTE "-------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 00000164		     2		.code
 00000164  52		     2		push	edx
 00000165  BA 00000093 R     2		mov	edx,OFFSET ??0001
 0000016A  E8 00000000 E     2		call	WriteString
 0000016F  5A		     2		pop	edx
 00000170  E8 00000000 E     1		call	Crlf
							mWriteLn "1: Up | 2: Right | 3: Down | 4: Left"
 000000A7		     2		.data		
 000000A7 31 3A 20 55 70     2		??0002 BYTE "1: Up | 2: Right | 3: Down | 4: Left",0	
	   20 7C 20 32 3A
	   20 52 69 67 68
	   74 20 7C 20 33
	   3A 20 44 6F 77
	   6E 20 7C 20 34
	   3A 20 4C 65 66
	   74 00
 00000175		     2		.code
 00000175  52		     2		push	edx
 00000176  BA 000000A7 R     2		mov	edx,OFFSET ??0002
 0000017B  E8 00000000 E     2		call	WriteString
 00000180  5A		     2		pop	edx
 00000181  E8 00000000 E     1		call	Crlf
 00000186  E8 00000000 E				call CRLF

 0000018B  FF 35 00000067 R				push GameBoardPtr
 00000191  E8 00000000 E				call B_PrintMoves

 00000196  E8 00000000 E				call CRLF
 0000019B  E8 00000000 E				call WaitMsg
 000001A0  EB 81					jmp NONMOVEENTRY

						.ELSEIF (eax == 3)
 000001A2  EB 63	   *	    jmp    @C000D
 000001A4		   *@C000B:
 000001A4  83 F8 03	   *	    cmp    eax, 003h
 000001A7  75 12	   *	    jne    @C000E
 000001A9  FF 35 00000067 R			  push GameBoardPtr
 000001AF  E8 00000000 E				call B_SwapUp
 000001B4  E9 FFFFFF49					jmp GAMELOOP

						.ELSEIF (eax == 4)
 000001B9  EB 4C	   *	    jmp    @C0010
 000001BB		   *@C000E:
 000001BB  83 F8 04	   *	    cmp    eax, 004h
 000001BE  75 12	   *	    jne    @C0011
 000001C0  FF 35 00000067 R			  push GameBoardPtr
 000001C6  E8 00000000 E				call B_SwapDown
 000001CB  E9 FFFFFF32					jmp GAMELOOP

						.ELSEIF (eax == 5)
 000001D0  EB 35	   *	    jmp    @C0013
 000001D2		   *@C0011:
 000001D2  83 F8 05	   *	    cmp    eax, 005h
 000001D5  75 12	   *	    jne    @C0014
 000001D7  FF 35 00000067 R			  push GameBoardPtr
 000001DD  E8 00000000 E				call B_SwapLeft
 000001E2  E9 FFFFFF1B					jmp GAMELOOP

						.ELSEIF (eax == 6)
 000001E7  EB 1E	   *	    jmp    @C0016
 000001E9		   *@C0014:
 000001E9  83 F8 06	   *	    cmp    eax, 006h
 000001EC  75 12	   *	    jne    @C0017
 000001EE  FF 35 00000067 R			  push GameBoardPtr
 000001F4  E8 00000000 E				call B_SwapRight
 000001F9  E9 FFFFFF04					jmp GAMELOOP

						.ELSEIF (eax == 7)
 000001FE  EB 07	   *	    jmp    @C0019
 00000200		   *@C0017:
 00000200  83 F8 07	   *	    cmp    eax, 007h
 00000203  75 02	   *	    jne    @C001A
 00000205  EB 6F					jmp quit

						.ENDIF
 00000207		   *@C001A:
 00000207		   *@C0019:
 00000207		   *@C0016:
 00000207		   *@C0013:
 00000207		   *@C0010:
 00000207		   *@C000D:
 00000207		   *@C000A:
						
 00000207				ENDGAMELOOP:

 00000207  EB 6D			jmp quit
 00000209				WIN:
						mWriteLn "CONGRATULATIONS! YOU WIN!"
 000000CC		     2		.data		
 000000CC 43 4F 4E 47 52     2		??0003 BYTE "CONGRATULATIONS! YOU WIN!",0	
	   41 54 55 4C 41
	   54 49 4F 4E 53
	   21 20 59 4F 55
	   20 57 49 4E 21
	   00
 00000209		     2		.code
 00000209  52		     2		push	edx
 0000020A  BA 000000CC R     2		mov	edx,OFFSET ??0003
 0000020F  E8 00000000 E     2		call	WriteString
 00000214  5A		     2		pop	edx
 00000215  E8 00000000 E     1		call	Crlf
						mWrite "Number of moves: "
 000000E6		     1		.data		
 000000E6 4E 75 6D 62 65     1		??0004 BYTE "Number of moves: ",0	
	   72 20 6F 66 20
	   6D 6F 76 65 73
	   3A 20 00
 0000021A		     1		.code
 0000021A  52		     1		push	edx
 0000021B  BA 000000E6 R     1		mov	edx,OFFSET ??0004
 00000220  E8 00000000 E     1		call	WriteString
 00000225  5A		     1		pop	edx

						; Prints number of moves taken
 00000226  FF 0D 0000006B R			dec numOfMoves
 0000022C  A1 0000006B R			mov eax, numOfMoves
 00000231  E8 00000000 E			call WriteDec
 00000236  E8 00000000 E			call CRLF

						; Print Move vector
 0000023B  E8 00000000 E			call CRLF
						mWriteLn "Up: 1, Right: 2, Down: 3, Left: 4"
 000000F8		     2		.data		
 000000F8 55 70 3A 20 31     2		??0005 BYTE "Up: 1, Right: 2, Down: 3, Left: 4",0	
	   2C 20 52 69 67
	   68 74 3A 20 32
	   2C 20 44 6F 77
	   6E 3A 20 33 2C
	   20 4C 65 66 74
	   3A 20 34 00
 00000240		     2		.code
 00000240  52		     2		push	edx
 00000241  BA 000000F8 R     2		mov	edx,OFFSET ??0005
 00000246  E8 00000000 E     2		call	WriteString
 0000024B  5A		     2		pop	edx
 0000024C  E8 00000000 E     1		call	Crlf

 00000251  FF 35 00000067 R			push GameBoardPtr
 00000257  E8 00000000 E			call B_PrintMoves
 0000025C  E8 00000000 E			call CRLF
 00000261  E8 00000000 E			call CRLF

						; Deletes board object
 00000266  FF 35 00000067 R			push GameBoardPtr
 0000026C  E8 00000000 E			call B_DeleteObj

						; Restarts to start menu
 00000271  E9 FFFFFE5B				jmp GAMESTART

 00000276			  quit:

				  EXIT
 00000276  6A 00	   *	    push   +000000000h
 00000278  E8 00000000 E   *	    call   ExitProcess
 0000027D			main ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000027D			PrintTitleLogo PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "WELCOME TO THE MASM SLIDING PUZZLE"
 0000011A		     2		.data		
 0000011A 57 45 4C 43 4F     2		??0006 BYTE "WELCOME TO THE MASM SLIDING PUZZLE",0	
	   4D 45 20 54 4F
	   20 54 48 45 20
	   4D 41 53 4D 20
	   53 4C 49 44 49
	   4E 47 20 50 55
	   5A 5A 4C 45 00
 0000027D		     2		.code
 0000027D  52		     2		push	edx
 0000027E  BA 0000011A R     2		mov	edx,OFFSET ??0006
 00000283  E8 00000000 E     2		call	WriteString
 00000288  5A		     2		pop	edx
 00000289  E8 00000000 E     1		call	Crlf
					mWriteLn "----------------------------------"
 0000013D		     2		.data		
 0000013D 2D 2D 2D 2D 2D     2		??0007 BYTE "----------------------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 0000028E		     2		.code
 0000028E  52		     2		push	edx
 0000028F  BA 0000013D R     2		mov	edx,OFFSET ??0007
 00000294  E8 00000000 E     2		call	WriteString
 00000299  5A		     2		pop	edx
 0000029A  E8 00000000 E     1		call	Crlf
 0000029F  C3				RET
 000002A0			PrintTitleLogo ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002A0			PrintStartMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 00000160		     2		.data		
 00000160 61 29 20 53 74     2		??0008 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 000002A0		     2		.code
 000002A0  52		     2		push	edx
 000002A1  BA 00000160 R     2		mov	edx,OFFSET ??0008
 000002A6  E8 00000000 E     2		call	WriteString
 000002AB  5A		     2		pop	edx
 000002AC  E8 00000000 E     1		call	Crlf
					mWriteLn "b) End Game (E)"
 00000176		     2		.data		
 00000176 62 29 20 45 6E     2		??0009 BYTE "b) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000002B1		     2		.code
 000002B1  52		     2		push	edx
 000002B2  BA 00000176 R     2		mov	edx,OFFSET ??0009
 000002B7  E8 00000000 E     2		call	WriteString
 000002BC  5A		     2		pop	edx
 000002BD  E8 00000000 E     1		call	Crlf
 000002C2  C3				RET 
 000002C3			PrintStartMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002C3			ProcessStartUserInput PROC uses edx
				; @returns EAX - 1: S, 2: E
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 000002C3  52		   *	    push   edx
 000002C4			  INPUTSTART:
 000002C4  BA 00000065 R		mov edx, OFFSET userInput
 000002C9  6A 01			push USER_INPUT_LENGTH
 000002CB  52				push edx
 000002CC  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 000002D1  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 000002D4  83 F8 5B	   *	    cmp    eax, 05Bh
 000002D7  72 03	   *	    jb	@C001C
 000002D9  83 E8 20			  sub eax, 32
					.ENDIF
 000002DC		   *@C001C:

					.IF (eax == 83) ; S
 000002DC  83 F8 53	   *	    cmp    eax, 053h
 000002DF  75 09	   *	    jne    @C001E
 000002E1  B8 00000001			  mov eax, 1
 000002E6  EB 23				jmp QUIT
					.ELSEIF (eax == 69) ; E
 000002E8  EB 21	   *	    jmp    @C0020
 000002EA		   *@C001E:
 000002EA  83 F8 45	   *	    cmp    eax, 045h
 000002ED  75 09	   *	    jne    @C0021
 000002EF  B8 00000002			  mov eax, 2
 000002F4  EB 15			  jmp QUIT
					.ELSE
 000002F6  EB 13	   *	    jmp    @C0023
 000002F8		   *@C0021:
					  mWriteLn "Invalid Input! Try again: "
 00000186		     2		.data		
 00000186 49 6E 76 61 6C     2		??000A BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 000002F8		     2		.code
 000002F8  52		     2		push	edx
 000002F9  BA 00000186 R     2		mov	edx,OFFSET ??000A
 000002FE  E8 00000000 E     2		call	WriteString
 00000303  5A		     2		pop	edx
 00000304  E8 00000000 E     1		call	Crlf
 00000309  EB B9				jmp INPUTSTART
					.ENDIF
 0000030B		   *@C0023:
 0000030B		   *@C0020:

 0000030B				QUIT:
					RET
 0000030B  5A		   *	    pop    edx
 0000030C  C3		   *	    ret    00000h
 0000030D			ProcessStartUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000030D			ProcessFilenameInput PROC uses edx
				; Asks for filename, and creates an board object if exists
				; @return eax - Pointer to board instance
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000030D  52		   *	    push   edx
 0000030E			  INPUTSTART:
					mWrite "Name of file to open? : "
 000001A1		     1		.data		
 000001A1 4E 61 6D 65 20     1		??000B BYTE "Name of file to open? : ",0	
	   6F 66 20 66 69
	   6C 65 20 74 6F
	   20 6F 70 65 6E
	   3F 20 3A 20 00
 0000030E		     1		.code
 0000030E  52		     1		push	edx
 0000030F  BA 000001A1 R     1		mov	edx,OFFSET ??000B
 00000314  E8 00000000 E     1		call	WriteString
 00000319  5A		     1		pop	edx
 0000031A  BA 00000000 R		mov edx, OFFSET filename

 0000031F  6A 64			push MAX_STR_LENGTH
 00000321  52				push edx
 00000322  E8 00000000 E		call UTIL_ReadString
 00000327  E8 00000000 E		call CRLF

					; Create board object and save in stack
 0000032C  E8 00000000 E		call B_CreateObj
 00000331  50				push eax 

 00000332  BA 00000000 R		mov edx, OFFSET filename
 00000337  52				push edx
 00000338  50				push eax
 00000339  E8 00000000 E		call B_ReadFile
					
					; If failed the read file, delete the created object
					.IF (eax == 0) 
 0000033E  0B C0	   *	    or	eax, eax
 00000340  75 07	   *	    jne    @C0024
 00000342  E8 00000000 E			call B_DeleteObj
 00000347  EB C5				jmp INPUTSTART
					.ENDIF
 00000349		   *@C0024:
					
 00000349  58				pop eax

 0000034A				QUIT:
					RET
 0000034A  5A		   *	    pop    edx
 0000034B  C3		   *	    ret    00000h
 0000034C			ProcessFilenameInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000034C			PrintGameMenu PROC 
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 000001BA		     2		.data		
 000001BA 61 29 20 53 74     2		??000C BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 0000034C		     2		.code
 0000034C  52		     2		push	edx
 0000034D  BA 000001BA R     2		mov	edx,OFFSET ??000C
 00000352  E8 00000000 E     2		call	WriteString
 00000357  5A		     2		pop	edx
 00000358  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Print Map (P)"
 000001D0		     2		.data		
 000001D0 62 29 20 50 72     2		??000D BYTE "b) Print Map (P)",0	
	   69 6E 74 20 4D
	   61 70 20 28 50
	   29 00
 0000035D		     2		.code
 0000035D  52		     2		push	edx
 0000035E  BA 000001D0 R     2		mov	edx,OFFSET ??000D
 00000363  E8 00000000 E     2		call	WriteString
 00000368  5A		     2		pop	edx
 00000369  E8 00000000 E     1		call	Crlf
					mWriteLn "c) Move Up (U)"
 000001E1		     2		.data		
 000001E1 63 29 20 4D 6F     2		??000E BYTE "c) Move Up (U)",0	
	   76 65 20 55 70
	   20 28 55 29 00
 0000036E		     2		.code
 0000036E  52		     2		push	edx
 0000036F  BA 000001E1 R     2		mov	edx,OFFSET ??000E
 00000374  E8 00000000 E     2		call	WriteString
 00000379  5A		     2		pop	edx
 0000037A  E8 00000000 E     1		call	Crlf
					mWriteLn "d) Move Down (D)"
 000001F0		     2		.data		
 000001F0 64 29 20 4D 6F     2		??000F BYTE "d) Move Down (D)",0	
	   76 65 20 44 6F
	   77 6E 20 28 44
	   29 00
 0000037F		     2		.code
 0000037F  52		     2		push	edx
 00000380  BA 000001F0 R     2		mov	edx,OFFSET ??000F
 00000385  E8 00000000 E     2		call	WriteString
 0000038A  5A		     2		pop	edx
 0000038B  E8 00000000 E     1		call	Crlf
					mWriteLn "e) Move Left (L)"
 00000201		     2		.data		
 00000201 65 29 20 4D 6F     2		??0010 BYTE "e) Move Left (L)",0	
	   76 65 20 4C 65
	   66 74 20 28 4C
	   29 00
 00000390		     2		.code
 00000390  52		     2		push	edx
 00000391  BA 00000201 R     2		mov	edx,OFFSET ??0010
 00000396  E8 00000000 E     2		call	WriteString
 0000039B  5A		     2		pop	edx
 0000039C  E8 00000000 E     1		call	Crlf
					mWriteLn "f) Move Right (R)"
 00000212		     2		.data		
 00000212 66 29 20 4D 6F     2		??0011 BYTE "f) Move Right (R)",0	
	   76 65 20 52 69
	   67 68 74 20 28
	   52 29 00
 000003A1		     2		.code
 000003A1  52		     2		push	edx
 000003A2  BA 00000212 R     2		mov	edx,OFFSET ??0011
 000003A7  E8 00000000 E     2		call	WriteString
 000003AC  5A		     2		pop	edx
 000003AD  E8 00000000 E     1		call	Crlf
					mWriteLn "g) End Game (E)"
 00000224		     2		.data		
 00000224 67 29 20 45 6E     2		??0012 BYTE "g) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000003B2		     2		.code
 000003B2  52		     2		push	edx
 000003B3  BA 00000224 R     2		mov	edx,OFFSET ??0012
 000003B8  E8 00000000 E     2		call	WriteString
 000003BD  5A		     2		pop	edx
 000003BE  E8 00000000 E     1		call	Crlf
 000003C3  C3				RET 
 000003C4			PrintGameMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003C4			ProcessGameUserInput PROC uses edx
				; @returns EAX -
				;  1: S	 | 3: U	 | 5: L	 | 7: E
				;  2: P	 | 4: D	 | 6: R  |
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003C4  52		   *	    push   edx
 000003C5			  INPUTSTART:
 000003C5  BA 00000065 R		mov edx, OFFSET userInput
 000003CA  6A 01			push USER_INPUT_LENGTH
 000003CC  52				push edx
 000003CD  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 000003D2  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 000003D5  83 F8 5B	   *	    cmp    eax, 05Bh
 000003D8  72 03	   *	    jb	@C0026
 000003DA  83 E8 20			  sub eax, 32
					.ENDIF
 000003DD		   *@C0026:

					; Sets eax to a different value for each input
					.IF (eax == 83) ; S
 000003DD  83 F8 53	   *	    cmp    eax, 053h
 000003E0  75 09	   *	    jne    @C0028
 000003E2  B8 00000001			  mov eax, 1
 000003E7  EB 6C				jmp QUIT
					.ELSEIF (eax == 80) ; P
 000003E9  EB 6A	   *	    jmp    @C002A
 000003EB		   *@C0028:
 000003EB  83 F8 50	   *	    cmp    eax, 050h
 000003EE  75 09	   *	    jne    @C002B
 000003F0  B8 00000002			  mov eax, 2
 000003F5  EB 5E			  jmp QUIT
					.ELSEIF (eax == 85) ; U
 000003F7  EB 5C	   *	    jmp    @C002D
 000003F9		   *@C002B:
 000003F9  83 F8 55	   *	    cmp    eax, 055h
 000003FC  75 09	   *	    jne    @C002E
 000003FE  B8 00000003			  mov eax, 3
 00000403  EB 50			  jmp QUIT
					.ELSEIF (eax == 68) ; D
 00000405  EB 4E	   *	    jmp    @C0030
 00000407		   *@C002E:
 00000407  83 F8 44	   *	    cmp    eax, 044h
 0000040A  75 09	   *	    jne    @C0031
 0000040C  B8 00000004			  mov eax, 4
 00000411  EB 42			  jmp QUIT
					.ELSEIF (eax == 76) ; L
 00000413  EB 40	   *	    jmp    @C0033
 00000415		   *@C0031:
 00000415  83 F8 4C	   *	    cmp    eax, 04Ch
 00000418  75 09	   *	    jne    @C0034
 0000041A  B8 00000005			  mov eax, 5
 0000041F  EB 34			  jmp QUIT
					.ELSEIF (eax == 82) ; R
 00000421  EB 32	   *	    jmp    @C0036
 00000423		   *@C0034:
 00000423  83 F8 52	   *	    cmp    eax, 052h
 00000426  75 09	   *	    jne    @C0037
 00000428  B8 00000006			  mov eax, 6
 0000042D  EB 26			  jmp QUIT
					.ELSEIF (eax == 69) ; E
 0000042F  EB 24	   *	    jmp    @C0039
 00000431		   *@C0037:
 00000431  83 F8 45	   *	    cmp    eax, 045h
 00000434  75 09	   *	    jne    @C003A
 00000436  B8 00000007			  mov eax, 7
 0000043B  EB 18			  jmp QUIT
					.ELSE
 0000043D  EB 16	   *	    jmp    @C003C
 0000043F		   *@C003A:
					  mWriteLn "Invalid Input! Try again: "
 00000234		     2		.data		
 00000234 49 6E 76 61 6C     2		??0013 BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 0000043F		     2		.code
 0000043F  52		     2		push	edx
 00000440  BA 00000234 R     2		mov	edx,OFFSET ??0013
 00000445  E8 00000000 E     2		call	WriteString
 0000044A  5A		     2		pop	edx
 0000044B  E8 00000000 E     1		call	Crlf
 00000450  E9 FFFFFF70				jmp INPUTSTART
					.ENDIF
 00000455		   *@C003C:
 00000455		   *@C0039:
 00000455		   *@C0036:
 00000455		   *@C0033:
 00000455		   *@C0030:
 00000455		   *@C002D:
 00000455		   *@C002A:

 00000455				QUIT:
					RET
 00000455  5A		   *	    pop    edx
 00000456  C3		   *	    ret    00000h
 00000457			ProcessGameUserInput ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 13:26:21
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Board  . . . . . . . . . . . . .	 0000000C
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  ZeroPos  . . . . . . . . . . .	 00000004	 Byte
  DirLock  . . . . . . . . . . .	 00000005	 Byte
  Distance . . . . . . . . . . .	 00000006	 Byte
  Filler . . . . . . . . . . . .	 00000007	 Byte
  MoveVectorPtr  . . . . . . . .	 00000008	 DWord
ByteVector . . . . . . . . . . .	 00000008
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 Word
  VectorCapacity . . . . . . . .	 00000006	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
MinHeap  . . . . . . . . . . . .	 00000008
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  HeapSize . . . . . . . . . . .	 00000004	 DWord
Pair . . . . . . . . . . . . . .	 00000008
  BoardPtr . . . . . . . . . . .	 00000000	 DWord
  VectorPtr  . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
Vector . . . . . . . . . . . . .	 0000000C
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 DWord
  VectorCapacity . . . . . . . .	 00000008	 DWord
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000024F DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000457 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BV_At  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_MakeCopy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Pop . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Print . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_PushBack  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Swap  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDirLock . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDistance  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintMoves . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_ReadFile . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SetupBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Append  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Remove  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGameMenu  . . . . . . . . .	P Near	 0000034C _TEXT	Length= 00000078 Public STDCALL
PrintStartMenu . . . . . . . . .	P Near	 000002A0 _TEXT	Length= 00000023 Public STDCALL
PrintTitleLogo . . . . . . . . .	P Near	 0000027D _TEXT	Length= 00000023 Public STDCALL
ProcessFilenameInput . . . . . .	P Near	 0000030D _TEXT	Length= 0000003F Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 0000030E _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000034A _TEXT	
ProcessGameUserInput . . . . . .	P Near	 000003C4 _TEXT	Length= 00000093 Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000003C5 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000455 _TEXT	
ProcessStartUserInput  . . . . .	P Near	 000002C3 _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000002C4 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000030B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_ReadString  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_SetColor  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_At . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_GetSize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Pop  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Print  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_PushBack . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Swap . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000027D Public STDCALL
  TESTLOOP . . . . . . . . . . .	L Near	 0000000F _TEXT	
  GAMESTART  . . . . . . . . . .	L Near	 000000D1 _TEXT	
  STARTNEWGAME . . . . . . . . .	L Near	 000000E0 _TEXT	
  BOARDCREATED . . . . . . . . .	L Near	 000000FD _TEXT	
  GAMELOOP . . . . . . . . . . .	L Near	 00000102 _TEXT	
  NONMOVEENTRY . . . . . . . . .	L Near	 00000123 _TEXT	
  ENDNONMOVEENTRY  . . . . . . .	L Near	 00000128 _TEXT	
  ENDGAMELOOP  . . . . . . . . .	L Near	 00000207 _TEXT	
  WIN  . . . . . . . . . . . . .	L Near	 00000209 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000276 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000007F _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000093 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000000A7 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000000CC _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000E6 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000F8 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000011A _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0000013D _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000160 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00000176 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000186 _DATA	
??000B . . . . . . . . . . . . .	Byte	 000001A1 _DATA	
??000C . . . . . . . . . . . . .	Byte	 000001BA _DATA	
??000D . . . . . . . . . . . . .	Byte	 000001D0 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000001E1 _DATA	
??000F . . . . . . . . . . . . .	Byte	 000001F0 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000201 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 00000212 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00000224 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000234 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DIR_DOWN . . . . . . . . . . . .	Number	 00000003h   
DIR_LEFT . . . . . . . . . . . .	Number	 00000004h   
DIR_RIGHT  . . . . . . . . . . .	Number	 00000002h   
DIR_UP . . . . . . . . . . . . .	Number	 00000001h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoardPtr . . . . . . . . . .	DWord	 00000067 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_LENGTH . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INPUT_LENGTH  . . . . . . .	Number	 00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
b1 . . . . . . . . . . . . . . .	DWord	 00000073 _DATA	
b2 . . . . . . . . . . . . . . .	DWord	 00000077 _DATA	
b3 . . . . . . . . . . . . . . .	DWord	 0000007B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numOfMoves . . . . . . . . . . .	DWord	 0000006B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
testmh . . . . . . . . . . . . .	DWord	 0000006F _DATA	
userInput  . . . . . . . . . . .	Byte	 00000065 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
