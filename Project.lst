Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 15:40:54
main.asm						     Page 1 - 1


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				INCLUDE UtilProcedures.inc
			      C UTIL_SetColor PROTO
			      C UTIL_ReadString PROTO
			      C 
				INCLUDE ByteVector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C ByteVector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  0000		      C   VectorSize WORD 0
 00000006  0004		      C   VectorCapacity WORD 4
			      C ByteVector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C BV_CreateObj PROTO
			      C BV_MakeCopy PROTO
			      C BV_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C BV_PushBack PROTO
			      C BV_At PROTO
			      C BV_Swap PROTO
			      C BV_Pop PROTO
			      C BV_Print PROTO
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _BV_Initialize
			      C ; _BV_IncreaseCapacity
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C 
			      C 
			      C 
				INCLUDE Vector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Vector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  00000000	      C   VectorSize DWORD 0
 00000008  00000004	      C   VectorCapacity DWORD 4
			      C Vector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C V_CreateObj PROTO
			      C V_MakeCopy PROTO
			      C V_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C V_PushBack PROTO
			      C V_At PROTO
			      C V_Swap PROTO
			      C V_Pop PROTO
			      C V_Print PROTO
			      C 
			      C ; Accessor Methods
			      C V_GetSize PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _V_Initialize
			      C ; _V_IncreaseCapacity
			      C 
				INCLUDE Board.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Board STRUCT
 00000000  00000000	      C   VectorPtr DWORD 0
 00000004  00		      C 	ZeroPos BYTE 0
 00000005  00		      C 	DirLock BYTE 0
 00000006  00		      C 	Distance BYTE 0
 00000007  00		      C 	Filler BYTE 0
 00000008  00000000	      C 	MoveVectorPtr DWORD 0
			      C Board ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Board Instances
			      C B_CreateObj PROTO
			      C B_MakeCopy PROTO
			      C B_DeleteObj PROTO
			      C B_SetupBoard PROTO
			      C 
			      C ; Board Methods
			      C B_SwapUp PROTO
			      C B_TestUp PROTO
			      C B_SwapRight PROTO
			      C B_TestRight PROTO
			      C B_SwapDown PROTO
			      C B_TestDown PROTO
			      C B_SwapLeft PROTO
			      C B_TestLeft PROTO
			      C B_PrintBoard PROTO
			      C B_PrintMoves PROTO
			      C B_GetDistance PROTO
			      C B_GetDirLock PROTO
			      C B_IsSolvable PROTO
			      C 
			      C B_GenerateChildren PROTO
			      C 
			      C ; File Methods
			      C B_ReadFile PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _B_FindZeroPos
			      C ; _B_CalcDistance
			      C ; _B_CalcInversions
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; DirLock Directions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 = 00000001		      C DIR_UP = 1
 = 00000002		      C DIR_RIGHT = 2
 = 00000003		      C DIR_DOWN = 3
 = 00000004		      C DIR_LEFT = 4
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; ByteVector.inc
			      C 
			      C 
			      C 
				INCLUDE MinHeap.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C MinHeap STRUCT
 00000000  00000000	      C   VectorPtr DWORD ?
 00000004  00000000	      C 	HeapSize DWORD 0
			      C MinHeap ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; MinHeap Instances
			      C MH_CreateObj PROTO
			      C MH_DeleteObj PROTO
			      C 
			      C ; MinHeap Methods
			      C MH_Append PROTO
			      C MH_Remove PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Private Methods
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _MH_PercolateUp
			      C ; _MH_PercolateDown
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; Vector.inc
			      C 

 00000000			.DATA

 = 00000064			MAX_STR_LENGTH = 100
 00000000  00000065 [		filename BYTE MAX_STR_LENGTH+1 DUP (?)
	    00
	   ]

 = 00000001			USER_INPUT_LENGTH = 1
 00000065  00000002 [		userInput BYTE USER_INPUT_LENGTH+1 DUP (?)
	    00
	   ]

 00000067 00000000		GameBoardPtr DWORD ?
 0000006B 00000000		numOfMoves DWORD 0

				; Base board for pathfinding
 0000006F 00000000		currentBoard DWORD ?
 00000073 00000000		priorityQueue DWORD ?

 00000000			.CODE

 00000000			main PROC

 00000000  E8 00000000 E	  call UTIL_SetColor

 00000005  E8 000002A1			call PrintTitleLogo

 0000000A  E8 000002BF			call PrintMetaMenu
 0000000F  E8 000002DD			call ProcessMetaUserInput

					.IF (eax == 1)
 00000014  83 F8 01	   *	    cmp    eax, 001h
 00000017  75 04	   *	    jne    @C0001
 00000019  EB 11			  jmp ALGSTART
					.ELSEIF (eax == 2)
 0000001B  EB 0A	   *	    jmp    @C0003
 0000001D		   *@C0001:
 0000001D  83 F8 02	   *	    cmp    eax, 002h
 00000020  75 05	   *	    jne    @C0004
 00000022  E9 000000D8			  jmp GAMESTART
					.ENDIF
 00000027		   *@C0004:
 00000027		   *@C0003:
 00000027  E9 000000D3			jmp GAMESTART

				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				; PATHFINDING
				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 0000002C				ALGSTART:

					; Creates board from file
 0000002C  E8 00000377			call ProcessFilenameInput
 00000031  A3 0000006F R		mov currentBoard, eax
				  
 00000036  FF 35 0000006F R		push currentBoard
 0000003C  E8 00000000 E		call B_GetDistance
					.IF (eax == 0)
 00000041  0B C0	   *	    or	eax, eax
 00000043  75 05	   *	    jne    @C0006
 00000045  E9 0000009F			  jmp TRIVIALSOLUTION
					.ENDIF
 0000004A		   *@C0006:

 0000004A  E8 00000000 E		call MH_CreateObj
 0000004F  A3 00000073 R		mov priorityQueue, eax

 00000054				STARTPATH:

					; Generate all possible children into minheap
 00000054  FF 35 00000073 R		push priorityQueue
 0000005A  FF 35 0000006F R		push currentBoard
 00000060  E8 00000000 E		call B_GenerateChildren

					; Delete current board
 00000065  FF 35 0000006F R		push currentBoard
 0000006B  E8 00000000 E		call B_DeleteObj

					; Set new current board
 00000070  FF 35 00000073 R		push priorityQueue
 00000076  E8 00000000 E		call MH_Remove
 0000007B  A3 0000006F R		mov currentBoard, eax

					; Checks for the success condition
 00000080  FF 35 0000006F R		push currentBoard
 00000086  E8 00000000 E		call B_GetDistance
					.IF (eax == 0)
 0000008B  0B C0	   *	    or	eax, eax
 0000008D  75 02	   *	    jne    @C0008
 0000008F  EB 02			  jmp SOLUTIONFOUND
					.ENDIF
 00000091		   *@C0008:

 00000091  EB C1			jmp STARTPATH
 00000093				SOLUTIONFOUND:
					  mWriteLn "SOLUTION FOUND!!!"
 00000077		     2		.data		
 00000077 53 4F 4C 55 54     2		??0000 BYTE "SOLUTION FOUND!!!",0	
	   49 4F 4E 20 46
	   4F 55 4E 44 21
	   21 21 00
 00000093		     2		.code
 00000093  52		     2		push	edx
 00000094  BA 00000077 R     2		mov	edx,OFFSET ??0000
 00000099  E8 00000000 E     2		call	WriteString
 0000009E  5A		     2		pop	edx
 0000009F  E8 00000000 E     1		call	Crlf
						mWriteLn "-------------------"
 00000089		     2		.data		
 00000089 2D 2D 2D 2D 2D     2		??0001 BYTE "-------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000000A4		     2		.code
 000000A4  52		     2		push	edx
 000000A5  BA 00000089 R     2		mov	edx,OFFSET ??0001
 000000AA  E8 00000000 E     2		call	WriteString
 000000AF  5A		     2		pop	edx
 000000B0  E8 00000000 E     1		call	Crlf
						mWriteLn "1: Up | 2: Right | 3: Down | 4: Left"
 0000009D		     2		.data		
 0000009D 31 3A 20 55 70     2		??0002 BYTE "1: Up | 2: Right | 3: Down | 4: Left",0	
	   20 7C 20 32 3A
	   20 52 69 67 68
	   74 20 7C 20 33
	   3A 20 44 6F 77
	   6E 20 7C 20 34
	   3A 20 4C 65 66
	   74 00
 000000B5		     2		.code
 000000B5  52		     2		push	edx
 000000B6  BA 0000009D R     2		mov	edx,OFFSET ??0002
 000000BB  E8 00000000 E     2		call	WriteString
 000000C0  5A		     2		pop	edx
 000000C1  E8 00000000 E     1		call	Crlf
						mWriteLn "-------------------"
 000000C2		     2		.data		
 000000C2 2D 2D 2D 2D 2D     2		??0003 BYTE "-------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000000C6		     2		.code
 000000C6  52		     2		push	edx
 000000C7  BA 000000C2 R     2		mov	edx,OFFSET ??0003
 000000CC  E8 00000000 E     2		call	WriteString
 000000D1  5A		     2		pop	edx
 000000D2  E8 00000000 E     1		call	Crlf
 000000D7  FF 35 0000006F R			push currentBoard
 000000DD  E8 00000000 E			call B_PrintMoves
 000000E2  E8 00000000 E			call CRLF
 000000E7  EB 11			jmp FINISHED
 000000E9				TRIVIALSOLUTION:
					  mWriteLn "Your board is already solved!"
 000000D6		     2		.data		
 000000D6 59 6F 75 72 20     2		??0004 BYTE "Your board is already solved!",0	
	   62 6F 61 72 64
	   20 69 73 20 61
	   6C 72 65 61 64
	   79 20 73 6F 6C
	   76 65 64 21 00
 000000E9		     2		.code
 000000E9  52		     2		push	edx
 000000EA  BA 000000D6 R     2		mov	edx,OFFSET ??0004
 000000EF  E8 00000000 E     2		call	WriteString
 000000F4  5A		     2		pop	edx
 000000F5  E8 00000000 E     1		call	Crlf

 000000FA				FINISHED:
 000000FA  E9 000001A5			jmp quit

				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				 ;ALL GAME LINES BELOW
				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 000000FF				GAMESTART:
 000000FF  E8 00000237			call PrintStartMenu
 00000104  E8 00000255			call ProcessStartUserInput
					.IF (eax == 1)
 00000109  83 F8 01	   *	    cmp    eax, 001h
 0000010C  75 13	   *	    jne    @C000A
 0000010E				  STARTNEWGAME:

 0000010E  C7 05 0000006B R			mov numOfMoves, 0
	   00000000
 00000118  E8 0000028B			  call ProcessFilenameInput
 0000011D  EB 0C				jmp BOARDCREATED

					.ELSEIF (eax == 2)
 0000011F  EB 0A	   *	    jmp    @C000C
 00000121		   *@C000A:
 00000121  83 F8 02	   *	    cmp    eax, 002h
 00000124  75 05	   *	    jne    @C000D
 00000126  E9 00000179			  jmp quit

					.ENDIF
 0000012B		   *@C000D:
 0000012B		   *@C000C:

 0000012B				BOARDCREATED:
 0000012B  A3 00000067 R		mov GameBoardPtr, eax

 00000130				GAMELOOP:
 00000130  E8 00000000 E		  call CLRSCR

 00000135  FF 05 0000006B R			inc numOfMoves

						; Check for win condition
 0000013B  FF 35 00000067 R			push GameBoardPtr
 00000141  E8 00000000 E			call B_GetDistance
						.IF (eax == 0)
 00000146  0B C0	   *	    or	eax, eax
 00000148  75 05	   *	    jne    @C000F
 0000014A  E9 000000E8				  jmp WIN
						.ENDIF
 0000014F		   *@C000F:

 0000014F  EB 05				jmp ENDNONMOVEENTRY
 00000151					NONMOVEENTRY:
 00000151  E8 00000000 E			  call CLRSCR
 00000156					ENDNONMOVEENTRY:

						; Print board representation
 00000156  FF 35 00000067 R		  push GameBoardPtr
 0000015C  E8 00000000 E			call B_PrintBoard

						; Print and process selection
 00000161  E8 000002A0			  call PrintGameMenu
 00000166  E8 00000313				call ProcessGameUserInput
						.IF (eax == 1)
 0000016B  83 F8 01	   *	    cmp    eax, 001h
 0000016E  75 07	   *	    jne    @C0011
 00000170  EB 9C					jmp STARTNEWGAME

						.ELSEIF (eax == 2)
 00000172  E9 000000BE	   *	    jmp    @C0013
 00000177		   *@C0011:
 00000177  83 F8 02	   *	    cmp    eax, 002h
 0000017A  75 56	   *	    jne    @C0014
 0000017C  E8 00000000 E			  call CLRSCR
							mWriteLn "Your move history: "
 000000F4		     2		.data		
 000000F4 59 6F 75 72 20     2		??0005 BYTE "Your move history: ",0	
	   6D 6F 76 65 20
	   68 69 73 74 6F
	   72 79 3A 20 00
 00000181		     2		.code
 00000181  52		     2		push	edx
 00000182  BA 000000F4 R     2		mov	edx,OFFSET ??0005
 00000187  E8 00000000 E     2		call	WriteString
 0000018C  5A		     2		pop	edx
 0000018D  E8 00000000 E     1		call	Crlf
							mWriteLn "-------------------"
 00000108		     2		.data		
 00000108 2D 2D 2D 2D 2D     2		??0006 BYTE "-------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 00000192		     2		.code
 00000192  52		     2		push	edx
 00000193  BA 00000108 R     2		mov	edx,OFFSET ??0006
 00000198  E8 00000000 E     2		call	WriteString
 0000019D  5A		     2		pop	edx
 0000019E  E8 00000000 E     1		call	Crlf
							mWriteLn "1: Up | 2: Right | 3: Down | 4: Left"
 0000011C		     2		.data		
 0000011C 31 3A 20 55 70     2		??0007 BYTE "1: Up | 2: Right | 3: Down | 4: Left",0	
	   20 7C 20 32 3A
	   20 52 69 67 68
	   74 20 7C 20 33
	   3A 20 44 6F 77
	   6E 20 7C 20 34
	   3A 20 4C 65 66
	   74 00
 000001A3		     2		.code
 000001A3  52		     2		push	edx
 000001A4  BA 0000011C R     2		mov	edx,OFFSET ??0007
 000001A9  E8 00000000 E     2		call	WriteString
 000001AE  5A		     2		pop	edx
 000001AF  E8 00000000 E     1		call	Crlf
 000001B4  E8 00000000 E				call CRLF

 000001B9  FF 35 00000067 R				push GameBoardPtr
 000001BF  E8 00000000 E				call B_PrintMoves

 000001C4  E8 00000000 E				call CRLF
 000001C9  E8 00000000 E				call WaitMsg
 000001CE  EB 81					jmp NONMOVEENTRY

						.ELSEIF (eax == 3)
 000001D0  EB 63	   *	    jmp    @C0016
 000001D2		   *@C0014:
 000001D2  83 F8 03	   *	    cmp    eax, 003h
 000001D5  75 12	   *	    jne    @C0017
 000001D7  FF 35 00000067 R			  push GameBoardPtr
 000001DD  E8 00000000 E				call B_SwapUp
 000001E2  E9 FFFFFF49					jmp GAMELOOP

						.ELSEIF (eax == 4)
 000001E7  EB 4C	   *	    jmp    @C0019
 000001E9		   *@C0017:
 000001E9  83 F8 04	   *	    cmp    eax, 004h
 000001EC  75 12	   *	    jne    @C001A
 000001EE  FF 35 00000067 R			  push GameBoardPtr
 000001F4  E8 00000000 E				call B_SwapDown
 000001F9  E9 FFFFFF32					jmp GAMELOOP

						.ELSEIF (eax == 5)
 000001FE  EB 35	   *	    jmp    @C001C
 00000200		   *@C001A:
 00000200  83 F8 05	   *	    cmp    eax, 005h
 00000203  75 12	   *	    jne    @C001D
 00000205  FF 35 00000067 R			  push GameBoardPtr
 0000020B  E8 00000000 E				call B_SwapLeft
 00000210  E9 FFFFFF1B					jmp GAMELOOP

						.ELSEIF (eax == 6)
 00000215  EB 1E	   *	    jmp    @C001F
 00000217		   *@C001D:
 00000217  83 F8 06	   *	    cmp    eax, 006h
 0000021A  75 12	   *	    jne    @C0020
 0000021C  FF 35 00000067 R			  push GameBoardPtr
 00000222  E8 00000000 E				call B_SwapRight
 00000227  E9 FFFFFF04					jmp GAMELOOP

						.ELSEIF (eax == 7)
 0000022C  EB 07	   *	    jmp    @C0022
 0000022E		   *@C0020:
 0000022E  83 F8 07	   *	    cmp    eax, 007h
 00000231  75 02	   *	    jne    @C0023
 00000233  EB 6F					jmp quit

						.ENDIF
 00000235		   *@C0023:
 00000235		   *@C0022:
 00000235		   *@C001F:
 00000235		   *@C001C:
 00000235		   *@C0019:
 00000235		   *@C0016:
 00000235		   *@C0013:
						
 00000235				ENDGAMELOOP:

 00000235  EB 6D			jmp quit
 00000237				WIN:
						mWriteLn "CONGRATULATIONS! YOU WIN!"
 00000141		     2		.data		
 00000141 43 4F 4E 47 52     2		??0008 BYTE "CONGRATULATIONS! YOU WIN!",0	
	   41 54 55 4C 41
	   54 49 4F 4E 53
	   21 20 59 4F 55
	   20 57 49 4E 21
	   00
 00000237		     2		.code
 00000237  52		     2		push	edx
 00000238  BA 00000141 R     2		mov	edx,OFFSET ??0008
 0000023D  E8 00000000 E     2		call	WriteString
 00000242  5A		     2		pop	edx
 00000243  E8 00000000 E     1		call	Crlf
						mWrite "Number of moves: "
 0000015B		     1		.data		
 0000015B 4E 75 6D 62 65     1		??0009 BYTE "Number of moves: ",0	
	   72 20 6F 66 20
	   6D 6F 76 65 73
	   3A 20 00
 00000248		     1		.code
 00000248  52		     1		push	edx
 00000249  BA 0000015B R     1		mov	edx,OFFSET ??0009
 0000024E  E8 00000000 E     1		call	WriteString
 00000253  5A		     1		pop	edx

						; Prints number of moves taken
 00000254  FF 0D 0000006B R			dec numOfMoves
 0000025A  A1 0000006B R			mov eax, numOfMoves
 0000025F  E8 00000000 E			call WriteDec
 00000264  E8 00000000 E			call CRLF

						; Print Move vector
 00000269  E8 00000000 E			call CRLF
						mWriteLn "Up: 1, Right: 2, Down: 3, Left: 4"
 0000016D		     2		.data		
 0000016D 55 70 3A 20 31     2		??000A BYTE "Up: 1, Right: 2, Down: 3, Left: 4",0	
	   2C 20 52 69 67
	   68 74 3A 20 32
	   2C 20 44 6F 77
	   6E 3A 20 33 2C
	   20 4C 65 66 74
	   3A 20 34 00
 0000026E		     2		.code
 0000026E  52		     2		push	edx
 0000026F  BA 0000016D R     2		mov	edx,OFFSET ??000A
 00000274  E8 00000000 E     2		call	WriteString
 00000279  5A		     2		pop	edx
 0000027A  E8 00000000 E     1		call	Crlf

 0000027F  FF 35 00000067 R			push GameBoardPtr
 00000285  E8 00000000 E			call B_PrintMoves
 0000028A  E8 00000000 E			call CRLF
 0000028F  E8 00000000 E			call CRLF

						; Deletes board object
 00000294  FF 35 00000067 R			push GameBoardPtr
 0000029A  E8 00000000 E			call B_DeleteObj

						; Restarts to start menu
 0000029F  E9 FFFFFE5B				jmp GAMESTART

 000002A4			  quit:

				  EXIT
 000002A4  6A 00	   *	    push   +000000000h
 000002A6  E8 00000000 E   *	    call   ExitProcess
 000002AB			main ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002AB			PrintTitleLogo PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "WELCOME TO THE MASM SLIDING PUZZLE"
 0000018F		     2		.data		
 0000018F 57 45 4C 43 4F     2		??000B BYTE "WELCOME TO THE MASM SLIDING PUZZLE",0	
	   4D 45 20 54 4F
	   20 54 48 45 20
	   4D 41 53 4D 20
	   53 4C 49 44 49
	   4E 47 20 50 55
	   5A 5A 4C 45 00
 000002AB		     2		.code
 000002AB  52		     2		push	edx
 000002AC  BA 0000018F R     2		mov	edx,OFFSET ??000B
 000002B1  E8 00000000 E     2		call	WriteString
 000002B6  5A		     2		pop	edx
 000002B7  E8 00000000 E     1		call	Crlf
					mWriteLn "----------------------------------"
 000001B2		     2		.data		
 000001B2 2D 2D 2D 2D 2D     2		??000C BYTE "----------------------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000002BC		     2		.code
 000002BC  52		     2		push	edx
 000002BD  BA 000001B2 R     2		mov	edx,OFFSET ??000C
 000002C2  E8 00000000 E     2		call	WriteString
 000002C7  5A		     2		pop	edx
 000002C8  E8 00000000 E     1		call	Crlf
 000002CD  C3				RET
 000002CE			PrintTitleLogo ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002CE			PrintMetaMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Solve a puzzle with the computer (C)"
 000001D5		     2		.data		
 000001D5 61 29 20 53 6F     2		??000D BYTE "a) Solve a puzzle with the computer (C)",0	
	   6C 76 65 20 61
	   20 70 75 7A 7A
	   6C 65 20 77 69
	   74 68 20 74 68
	   65 20 63 6F 6D
	   70 75 74 65 72
	   20 28 43 29 00
 000002CE		     2		.code
 000002CE  52		     2		push	edx
 000002CF  BA 000001D5 R     2		mov	edx,OFFSET ??000D
 000002D4  E8 00000000 E     2		call	WriteString
 000002D9  5A		     2		pop	edx
 000002DA  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Solve a puzzle yourself (Y)"
 000001FD		     2		.data		
 000001FD 62 29 20 53 6F     2		??000E BYTE "b) Solve a puzzle yourself (Y)",0	
	   6C 76 65 20 61
	   20 70 75 7A 7A
	   6C 65 20 79 6F
	   75 72 73 65 6C
	   66 20 28 59 29
	   00
 000002DF		     2		.code
 000002DF  52		     2		push	edx
 000002E0  BA 000001FD R     2		mov	edx,OFFSET ??000E
 000002E5  E8 00000000 E     2		call	WriteString
 000002EA  5A		     2		pop	edx
 000002EB  E8 00000000 E     1		call	Crlf
 000002F0  C3				RET
 000002F1			PrintMetaMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002F1			ProcessMetaUserInput PROC uses edx
				; @returns EAX - 1: C, 2: Y
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 000002F1  52		   *	    push   edx
 000002F2			  INPUTSTART:
 000002F2  BA 00000065 R		mov edx, OFFSET userInput
 000002F7  6A 01			push USER_INPUT_LENGTH
 000002F9  52				push edx
 000002FA  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 000002FF  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 00000302  83 F8 5B	   *	    cmp    eax, 05Bh
 00000305  72 03	   *	    jb	@C0025
 00000307  83 E8 20			  sub eax, 32
					.ENDIF
 0000030A		   *@C0025:

					.IF (eax == 67) ; C
 0000030A  83 F8 43	   *	    cmp    eax, 043h
 0000030D  75 09	   *	    jne    @C0027
 0000030F  B8 00000001			  mov eax, 1
 00000314  EB 23				jmp QUIT
					.ELSEIF (eax == 89) ; Y
 00000316  EB 21	   *	    jmp    @C0029
 00000318		   *@C0027:
 00000318  83 F8 59	   *	    cmp    eax, 059h
 0000031B  75 09	   *	    jne    @C002A
 0000031D  B8 00000002			  mov eax, 2
 00000322  EB 15			  jmp QUIT
					.ELSE
 00000324  EB 13	   *	    jmp    @C002C
 00000326		   *@C002A:
					  mWriteLn "Invalid Input! Try again: "
 0000021C		     2		.data		
 0000021C 49 6E 76 61 6C     2		??000F BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 00000326		     2		.code
 00000326  52		     2		push	edx
 00000327  BA 0000021C R     2		mov	edx,OFFSET ??000F
 0000032C  E8 00000000 E     2		call	WriteString
 00000331  5A		     2		pop	edx
 00000332  E8 00000000 E     1		call	Crlf
 00000337  EB B9				jmp INPUTSTART
					.ENDIF
 00000339		   *@C002C:
 00000339		   *@C0029:

 00000339				QUIT:
					RET
 00000339  5A		   *	    pop    edx
 0000033A  C3		   *	    ret    00000h
 0000033B			ProcessMetaUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000033B			PrintStartMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 00000237		     2		.data		
 00000237 61 29 20 53 74     2		??0010 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 0000033B		     2		.code
 0000033B  52		     2		push	edx
 0000033C  BA 00000237 R     2		mov	edx,OFFSET ??0010
 00000341  E8 00000000 E     2		call	WriteString
 00000346  5A		     2		pop	edx
 00000347  E8 00000000 E     1		call	Crlf
					mWriteLn "b) End Game (E)"
 0000024D		     2		.data		
 0000024D 62 29 20 45 6E     2		??0011 BYTE "b) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 0000034C		     2		.code
 0000034C  52		     2		push	edx
 0000034D  BA 0000024D R     2		mov	edx,OFFSET ??0011
 00000352  E8 00000000 E     2		call	WriteString
 00000357  5A		     2		pop	edx
 00000358  E8 00000000 E     1		call	Crlf
 0000035D  C3				RET 
 0000035E			PrintStartMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000035E			ProcessStartUserInput PROC uses edx
				; @returns EAX - 1: S, 2: E
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 0000035E  52		   *	    push   edx
 0000035F			  INPUTSTART:
 0000035F  BA 00000065 R		mov edx, OFFSET userInput
 00000364  6A 01			push USER_INPUT_LENGTH
 00000366  52				push edx
 00000367  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 0000036C  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 0000036F  83 F8 5B	   *	    cmp    eax, 05Bh
 00000372  72 03	   *	    jb	@C002D
 00000374  83 E8 20			  sub eax, 32
					.ENDIF
 00000377		   *@C002D:

					.IF (eax == 83) ; S
 00000377  83 F8 53	   *	    cmp    eax, 053h
 0000037A  75 09	   *	    jne    @C002F
 0000037C  B8 00000001			  mov eax, 1
 00000381  EB 23				jmp QUIT
					.ELSEIF (eax == 69) ; E
 00000383  EB 21	   *	    jmp    @C0031
 00000385		   *@C002F:
 00000385  83 F8 45	   *	    cmp    eax, 045h
 00000388  75 09	   *	    jne    @C0032
 0000038A  B8 00000002			  mov eax, 2
 0000038F  EB 15			  jmp QUIT
					.ELSE
 00000391  EB 13	   *	    jmp    @C0034
 00000393		   *@C0032:
					  mWriteLn "Invalid Input! Try again: "
 0000025D		     2		.data		
 0000025D 49 6E 76 61 6C     2		??0012 BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 00000393		     2		.code
 00000393  52		     2		push	edx
 00000394  BA 0000025D R     2		mov	edx,OFFSET ??0012
 00000399  E8 00000000 E     2		call	WriteString
 0000039E  5A		     2		pop	edx
 0000039F  E8 00000000 E     1		call	Crlf
 000003A4  EB B9				jmp INPUTSTART
					.ENDIF
 000003A6		   *@C0034:
 000003A6		   *@C0031:

 000003A6				QUIT:
					RET
 000003A6  5A		   *	    pop    edx
 000003A7  C3		   *	    ret    00000h
 000003A8			ProcessStartUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003A8			ProcessFilenameInput PROC uses edx
				; Asks for filename, and creates an board object if exists
				; @return eax - Pointer to board instance
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003A8  52		   *	    push   edx
 000003A9			  INPUTSTART:
					mWrite "Name of file to open? : "
 00000278		     1		.data		
 00000278 4E 61 6D 65 20     1		??0013 BYTE "Name of file to open? : ",0	
	   6F 66 20 66 69
	   6C 65 20 74 6F
	   20 6F 70 65 6E
	   3F 20 3A 20 00
 000003A9		     1		.code
 000003A9  52		     1		push	edx
 000003AA  BA 00000278 R     1		mov	edx,OFFSET ??0013
 000003AF  E8 00000000 E     1		call	WriteString
 000003B4  5A		     1		pop	edx
 000003B5  BA 00000000 R		mov edx, OFFSET filename

 000003BA  6A 64			push MAX_STR_LENGTH
 000003BC  52				push edx
 000003BD  E8 00000000 E		call UTIL_ReadString
 000003C2  E8 00000000 E		call CRLF

					; Create board object and save in stack
 000003C7  E8 00000000 E		call B_CreateObj
 000003CC  50				push eax 

 000003CD  BA 00000000 R		mov edx, OFFSET filename
 000003D2  52				push edx
 000003D3  50				push eax
 000003D4  E8 00000000 E		call B_ReadFile
					
					; If failed the read file, delete the created object
					.IF (eax == 0) 
 000003D9  0B C0	   *	    or	eax, eax
 000003DB  75 07	   *	    jne    @C0035
 000003DD  E8 00000000 E			call B_DeleteObj
 000003E2  EB C5				jmp INPUTSTART
					.ENDIF
 000003E4		   *@C0035:

 000003E4  58				pop eax
 000003E5  50				push eax

					; If the board is not solvable, delete and retry
 000003E6  50				push eax
 000003E7  E8 00000000 E		call B_IsSolvable

					.IF (eax == 0)
 000003EC  0B C0	   *	    or	eax, eax
 000003EE  75 13	   *	    jne    @C0037
					  mWrite "This puzzle is not solvable! Try another file."
 00000291		     1		.data		
 00000291 54 68 69 73 20     1		??0014 BYTE "This puzzle is not solvable! Try another file.",0	
	   70 75 7A 7A 6C
	   65 20 69 73 20
	   6E 6F 74 20 73
	   6F 6C 76 61 62
	   6C 65 21 20 54
	   72 79 20 61 6E
	   6F 74 68 65 72
	   20 66 69 6C 65
	   2E 00
 000003F0		     1		.code
 000003F0  52		     1		push	edx
 000003F1  BA 00000291 R     1		mov	edx,OFFSET ??0014
 000003F6  E8 00000000 E     1		call	WriteString
 000003FB  5A		     1		pop	edx
 000003FC  E8 00000000 E			call CRLF
 00000401  EB A6				jmp INPUTSTART
					.ENDIF
 00000403		   *@C0037:
					
 00000403  58				pop eax

 00000404				QUIT:
					RET
 00000404  5A		   *	    pop    edx
 00000405  C3		   *	    ret    00000h
 00000406			ProcessFilenameInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000406			PrintGameMenu PROC 
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 000002C0		     2		.data		
 000002C0 61 29 20 53 74     2		??0015 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 00000406		     2		.code
 00000406  52		     2		push	edx
 00000407  BA 000002C0 R     2		mov	edx,OFFSET ??0015
 0000040C  E8 00000000 E     2		call	WriteString
 00000411  5A		     2		pop	edx
 00000412  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Print Map (P)"
 000002D6		     2		.data		
 000002D6 62 29 20 50 72     2		??0016 BYTE "b) Print Map (P)",0	
	   69 6E 74 20 4D
	   61 70 20 28 50
	   29 00
 00000417		     2		.code
 00000417  52		     2		push	edx
 00000418  BA 000002D6 R     2		mov	edx,OFFSET ??0016
 0000041D  E8 00000000 E     2		call	WriteString
 00000422  5A		     2		pop	edx
 00000423  E8 00000000 E     1		call	Crlf
					mWriteLn "c) Move Up (U)"
 000002E7		     2		.data		
 000002E7 63 29 20 4D 6F     2		??0017 BYTE "c) Move Up (U)",0	
	   76 65 20 55 70
	   20 28 55 29 00
 00000428		     2		.code
 00000428  52		     2		push	edx
 00000429  BA 000002E7 R     2		mov	edx,OFFSET ??0017
 0000042E  E8 00000000 E     2		call	WriteString
 00000433  5A		     2		pop	edx
 00000434  E8 00000000 E     1		call	Crlf
					mWriteLn "d) Move Down (D)"
 000002F6		     2		.data		
 000002F6 64 29 20 4D 6F     2		??0018 BYTE "d) Move Down (D)",0	
	   76 65 20 44 6F
	   77 6E 20 28 44
	   29 00
 00000439		     2		.code
 00000439  52		     2		push	edx
 0000043A  BA 000002F6 R     2		mov	edx,OFFSET ??0018
 0000043F  E8 00000000 E     2		call	WriteString
 00000444  5A		     2		pop	edx
 00000445  E8 00000000 E     1		call	Crlf
					mWriteLn "e) Move Left (L)"
 00000307		     2		.data		
 00000307 65 29 20 4D 6F     2		??0019 BYTE "e) Move Left (L)",0	
	   76 65 20 4C 65
	   66 74 20 28 4C
	   29 00
 0000044A		     2		.code
 0000044A  52		     2		push	edx
 0000044B  BA 00000307 R     2		mov	edx,OFFSET ??0019
 00000450  E8 00000000 E     2		call	WriteString
 00000455  5A		     2		pop	edx
 00000456  E8 00000000 E     1		call	Crlf
					mWriteLn "f) Move Right (R)"
 00000318		     2		.data		
 00000318 66 29 20 4D 6F     2		??001A BYTE "f) Move Right (R)",0	
	   76 65 20 52 69
	   67 68 74 20 28
	   52 29 00
 0000045B		     2		.code
 0000045B  52		     2		push	edx
 0000045C  BA 00000318 R     2		mov	edx,OFFSET ??001A
 00000461  E8 00000000 E     2		call	WriteString
 00000466  5A		     2		pop	edx
 00000467  E8 00000000 E     1		call	Crlf
					mWriteLn "g) End Game (E)"
 0000032A		     2		.data		
 0000032A 67 29 20 45 6E     2		??001B BYTE "g) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 0000046C		     2		.code
 0000046C  52		     2		push	edx
 0000046D  BA 0000032A R     2		mov	edx,OFFSET ??001B
 00000472  E8 00000000 E     2		call	WriteString
 00000477  5A		     2		pop	edx
 00000478  E8 00000000 E     1		call	Crlf
 0000047D  C3				RET 
 0000047E			PrintGameMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000047E			ProcessGameUserInput PROC uses edx
				; @returns EAX -
				;  1: S	 | 3: U	 | 5: L	 | 7: E
				;  2: P	 | 4: D	 | 6: R  |
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000047E  52		   *	    push   edx
 0000047F			  INPUTSTART:
 0000047F  BA 00000065 R		mov edx, OFFSET userInput
 00000484  6A 01			push USER_INPUT_LENGTH
 00000486  52				push edx
 00000487  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 0000048C  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 0000048F  83 F8 5B	   *	    cmp    eax, 05Bh
 00000492  72 03	   *	    jb	@C0039
 00000494  83 E8 20			  sub eax, 32
					.ENDIF
 00000497		   *@C0039:

					; Sets eax to a different value for each input
					.IF (eax == 83) ; S
 00000497  83 F8 53	   *	    cmp    eax, 053h
 0000049A  75 09	   *	    jne    @C003B
 0000049C  B8 00000001			  mov eax, 1
 000004A1  EB 6C				jmp QUIT
					.ELSEIF (eax == 80) ; P
 000004A3  EB 6A	   *	    jmp    @C003D
 000004A5		   *@C003B:
 000004A5  83 F8 50	   *	    cmp    eax, 050h
 000004A8  75 09	   *	    jne    @C003E
 000004AA  B8 00000002			  mov eax, 2
 000004AF  EB 5E			  jmp QUIT
					.ELSEIF (eax == 85) ; U
 000004B1  EB 5C	   *	    jmp    @C0040
 000004B3		   *@C003E:
 000004B3  83 F8 55	   *	    cmp    eax, 055h
 000004B6  75 09	   *	    jne    @C0041
 000004B8  B8 00000003			  mov eax, 3
 000004BD  EB 50			  jmp QUIT
					.ELSEIF (eax == 68) ; D
 000004BF  EB 4E	   *	    jmp    @C0043
 000004C1		   *@C0041:
 000004C1  83 F8 44	   *	    cmp    eax, 044h
 000004C4  75 09	   *	    jne    @C0044
 000004C6  B8 00000004			  mov eax, 4
 000004CB  EB 42			  jmp QUIT
					.ELSEIF (eax == 76) ; L
 000004CD  EB 40	   *	    jmp    @C0046
 000004CF		   *@C0044:
 000004CF  83 F8 4C	   *	    cmp    eax, 04Ch
 000004D2  75 09	   *	    jne    @C0047
 000004D4  B8 00000005			  mov eax, 5
 000004D9  EB 34			  jmp QUIT
					.ELSEIF (eax == 82) ; R
 000004DB  EB 32	   *	    jmp    @C0049
 000004DD		   *@C0047:
 000004DD  83 F8 52	   *	    cmp    eax, 052h
 000004E0  75 09	   *	    jne    @C004A
 000004E2  B8 00000006			  mov eax, 6
 000004E7  EB 26			  jmp QUIT
					.ELSEIF (eax == 69) ; E
 000004E9  EB 24	   *	    jmp    @C004C
 000004EB		   *@C004A:
 000004EB  83 F8 45	   *	    cmp    eax, 045h
 000004EE  75 09	   *	    jne    @C004D
 000004F0  B8 00000007			  mov eax, 7
 000004F5  EB 18			  jmp QUIT
					.ELSE
 000004F7  EB 16	   *	    jmp    @C004F
 000004F9		   *@C004D:
					  mWriteLn "Invalid Input! Try again: "
 0000033A		     2		.data		
 0000033A 49 6E 76 61 6C     2		??001C BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 000004F9		     2		.code
 000004F9  52		     2		push	edx
 000004FA  BA 0000033A R     2		mov	edx,OFFSET ??001C
 000004FF  E8 00000000 E     2		call	WriteString
 00000504  5A		     2		pop	edx
 00000505  E8 00000000 E     1		call	Crlf
 0000050A  E9 FFFFFF70				jmp INPUTSTART
					.ENDIF
 0000050F		   *@C004F:
 0000050F		   *@C004C:
 0000050F		   *@C0049:
 0000050F		   *@C0046:
 0000050F		   *@C0043:
 0000050F		   *@C0040:
 0000050F		   *@C003D:

 0000050F				QUIT:
					RET
 0000050F  5A		   *	    pop    edx
 00000510  C3		   *	    ret    00000h
 00000511			ProcessGameUserInput ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 15:40:54
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Board  . . . . . . . . . . . . .	 0000000C
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  ZeroPos  . . . . . . . . . . .	 00000004	 Byte
  DirLock  . . . . . . . . . . .	 00000005	 Byte
  Distance . . . . . . . . . . .	 00000006	 Byte
  Filler . . . . . . . . . . . .	 00000007	 Byte
  MoveVectorPtr  . . . . . . . .	 00000008	 DWord
ByteVector . . . . . . . . . . .	 00000008
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 Word
  VectorCapacity . . . . . . . .	 00000006	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
MinHeap  . . . . . . . . . . . .	 00000008
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  HeapSize . . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
Vector . . . . . . . . . . . . .	 0000000C
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 DWord
  VectorCapacity . . . . . . . .	 00000008	 DWord
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000355 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000511 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BV_At  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_MakeCopy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Pop . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Print . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_PushBack  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Swap  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GenerateChildren . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDirLock . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDistance  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_IsSolvable . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintMoves . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_ReadFile . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SetupBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Append  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Remove  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGameMenu  . . . . . . . . .	P Near	 00000406 _TEXT	Length= 00000078 Public STDCALL
PrintMetaMenu  . . . . . . . . .	P Near	 000002CE _TEXT	Length= 00000023 Public STDCALL
PrintStartMenu . . . . . . . . .	P Near	 0000033B _TEXT	Length= 00000023 Public STDCALL
PrintTitleLogo . . . . . . . . .	P Near	 000002AB _TEXT	Length= 00000023 Public STDCALL
ProcessFilenameInput . . . . . .	P Near	 000003A8 _TEXT	Length= 0000005E Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000003A9 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000404 _TEXT	
ProcessGameUserInput . . . . . .	P Near	 0000047E _TEXT	Length= 00000093 Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 0000047F _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000050F _TEXT	
ProcessMetaUserInput . . . . . .	P Near	 000002F1 _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000002F2 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000339 _TEXT	
ProcessStartUserInput  . . . . .	P Near	 0000035E _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 0000035F _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000003A6 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_ReadString  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_SetColor  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_At . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_GetSize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Pop  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Print  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_PushBack . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Swap . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002AB Public STDCALL
  ALGSTART . . . . . . . . . . .	L Near	 0000002C _TEXT	
  STARTPATH  . . . . . . . . . .	L Near	 00000054 _TEXT	
  SOLUTIONFOUND  . . . . . . . .	L Near	 00000093 _TEXT	
  TRIVIALSOLUTION  . . . . . . .	L Near	 000000E9 _TEXT	
  FINISHED . . . . . . . . . . .	L Near	 000000FA _TEXT	
  GAMESTART  . . . . . . . . . .	L Near	 000000FF _TEXT	
  STARTNEWGAME . . . . . . . . .	L Near	 0000010E _TEXT	
  BOARDCREATED . . . . . . . . .	L Near	 0000012B _TEXT	
  GAMELOOP . . . . . . . . . . .	L Near	 00000130 _TEXT	
  NONMOVEENTRY . . . . . . . . .	L Near	 00000151 _TEXT	
  ENDNONMOVEENTRY  . . . . . . .	L Near	 00000156 _TEXT	
  ENDGAMELOOP  . . . . . . . . .	L Near	 00000235 _TEXT	
  WIN  . . . . . . . . . . . . .	L Near	 00000237 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 000002A4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000077 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000089 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000009D _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000000C2 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000D6 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000F4 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00000108 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 0000011C _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000141 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0000015B _DATA	
??000A . . . . . . . . . . . . .	Byte	 0000016D _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000018F _DATA	
??000C . . . . . . . . . . . . .	Byte	 000001B2 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000001D5 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000001FD _DATA	
??000F . . . . . . . . . . . . .	Byte	 0000021C _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000237 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0000024D _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0000025D _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000278 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 00000291 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 000002C0 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000002D6 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 000002E7 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 000002F6 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 00000307 _DATA	
??001A . . . . . . . . . . . . .	Byte	 00000318 _DATA	
??001B . . . . . . . . . . . . .	Byte	 0000032A _DATA	
??001C . . . . . . . . . . . . .	Byte	 0000033A _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DIR_DOWN . . . . . . . . . . . .	Number	 00000003h   
DIR_LEFT . . . . . . . . . . . .	Number	 00000004h   
DIR_RIGHT  . . . . . . . . . . .	Number	 00000002h   
DIR_UP . . . . . . . . . . . . .	Number	 00000001h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoardPtr . . . . . . . . . .	DWord	 00000067 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_LENGTH . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INPUT_LENGTH  . . . . . . .	Number	 00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
currentBoard . . . . . . . . . .	DWord	 0000006F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numOfMoves . . . . . . . . . . .	DWord	 0000006B _DATA	
priorityQueue  . . . . . . . . .	DWord	 00000073 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	Byte	 00000065 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
