Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 15:15:23
main.asm						     Page 1 - 1


				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess proto, dwExitCode:dword


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .MODEL flat, stdcall
c:\Irvine\SmallWin.inc(11) : warning A4011:multiple .MODEL directives found : .MODEL ignored
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				INCLUDE UtilProcedures.inc
			      C UTIL_SetColor PROTO
			      C UTIL_ReadString PROTO
			      C 
				INCLUDE ByteVector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C ByteVector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  0000		      C   VectorSize WORD 0
 00000006  0004		      C   VectorCapacity WORD 4
			      C ByteVector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C BV_CreateObj PROTO
			      C BV_MakeCopy PROTO
			      C BV_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C BV_PushBack PROTO
			      C BV_At PROTO
			      C BV_Swap PROTO
			      C BV_Pop PROTO
			      C BV_Print PROTO
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _BV_Initialize
			      C ; _BV_IncreaseCapacity
			      C 
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C 
			      C 
			      C 
				INCLUDE Vector.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Vector STRUCT
 00000000  00000000	      C   Root DWORD ?
 00000004  00000000	      C   VectorSize DWORD 0
 00000008  00000004	      C   VectorCapacity DWORD 4
			      C Vector ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Vector Instances
			      C V_CreateObj PROTO
			      C V_MakeCopy PROTO
			      C V_DeleteObj PROTO
			      C 
			      C ; Vector Methods
			      C V_PushBack PROTO
			      C V_At PROTO
			      C V_Swap PROTO
			      C V_Pop PROTO
			      C V_Print PROTO
			      C 
			      C ; Accessor Methods
			      C V_GetSize PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _V_Initialize
			      C ; _V_IncreaseCapacity
			      C 
				INCLUDE Board.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000000C		      C Board STRUCT
 00000000  00000000	      C   VectorPtr DWORD 0
 00000004  00		      C 	ZeroPos BYTE 0
 00000005  00		      C 	DirLock BYTE 0
 00000006  00		      C 	Distance BYTE 0
 00000007  00		      C 	Filler BYTE 0
 00000008  00000000	      C 	MoveVectorPtr DWORD 0
			      C Board ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Board Instances
			      C B_CreateObj PROTO
			      C B_MakeCopy PROTO
			      C B_DeleteObj PROTO
			      C B_SetupBoard PROTO
			      C 
			      C ; Board Methods
			      C B_SwapUp PROTO
			      C B_TestUp PROTO
			      C B_SwapRight PROTO
			      C B_TestRight PROTO
			      C B_SwapDown PROTO
			      C B_TestDown PROTO
			      C B_SwapLeft PROTO
			      C B_TestLeft PROTO
			      C B_PrintBoard PROTO
			      C B_PrintMoves PROTO
			      C B_GetDistance PROTO
			      C B_GetDirLock PROTO
			      C B_IsSolvable PROTO
			      C 
			      C B_GenerateChildren PROTO
			      C 
			      C ; File Methods
			      C B_ReadFile PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Private Procedures
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _B_FindZeroPos
			      C ; _B_CalcDistance
			      C ; _B_CalcInversions
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; DirLock Directions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 = 00000001		      C DIR_UP = 1
 = 00000002		      C DIR_RIGHT = 2
 = 00000003		      C DIR_DOWN = 3
 = 00000004		      C DIR_LEFT = 4
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; ByteVector.inc
			      C 
			      C 
			      C 
				INCLUDE MinHeap.inc
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Structure Definitions
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000008		      C MinHeap STRUCT
 00000000  00000000	      C   VectorPtr DWORD ?
 00000004  00000000	      C 	HeapSize DWORD 0
			      C MinHeap ENDS
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Procedure Prototypes
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; MinHeap Instances
			      C MH_CreateObj PROTO
			      C MH_DeleteObj PROTO
			      C 
			      C ; MinHeap Methods
			      C MH_Append PROTO
			      C MH_Remove PROTO
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - -  - - -
			      C ; Private Methods
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; _MH_PercolateUp
			      C ; _MH_PercolateDown
			      C 
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Dependencies
			      C ; - - - - - - - - - - - - - - - - - - - - - - - - -
			      C ; Irvine32.inc
			      C ; Macros.inc
			      C ; Vector.inc
			      C 

 00000000			.DATA

 = 00000064			MAX_STR_LENGTH = 100
 00000000  00000065 [		filename BYTE MAX_STR_LENGTH+1 DUP (?)
	    00
	   ]

 = 00000001			USER_INPUT_LENGTH = 1
 00000065  00000002 [		userInput BYTE USER_INPUT_LENGTH+1 DUP (?)
	    00
	   ]

 00000067 00000000		GameBoardPtr DWORD ?
 0000006B 00000000		numOfMoves DWORD 0

 0000006F 00000000		testmh dword ?
 00000073 00000000		testb dword ?

 00000000			.CODE

 00000000			main PROC

 00000000  E8 00000000 E	  call UTIL_SetColor

 00000005  E8 00000216			call PrintTitleLogo

 0000000A  E8 00000234			call PrintMetaMenu
 0000000F  E8 00000252			call ProcessMetaUserInput

					.IF (eax == 1)
 00000014  83 F8 01	   *	    cmp    eax, 001h
 00000017  75 04	   *	    jne    @C0001
 00000019  EB 0B			  jmp ALGSTART
					.ELSEIF (eax == 2)
 0000001B  EB 07	   *	    jmp    @C0003
 0000001D		   *@C0001:
 0000001D  83 F8 02	   *	    cmp    eax, 002h
 00000020  75 02	   *	    jne    @C0004
 00000022  EB 50			  jmp GAMESTART
					.ENDIF
 00000024		   *@C0004:
 00000024		   *@C0003:
 00000024  EB 4E			jmp GAMESTART

				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				; PATHFINDING
				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 00000026				ALGSTART:

 00000026  B9 00000064			mov ecx, 100
 0000002B				TESTLOOP:

 0000002B  E8 00000000 E		call MH_CreateObj
 00000030  A3 0000006F R		mov testmh, eax

 00000035  E8 00000000 E		call B_CreateObj
 0000003A  A3 00000073 R		mov testb, eax
 0000003F  6A 01			push 1
 00000041  6A 02			push 2
 00000043  6A 03			push 3
 00000045  6A 04			push 4
 00000047  6A 05			push 5
 00000049  6A 06			push 6
 0000004B  6A 07			push 7
 0000004D  6A 08			push 8
 0000004F  6A 00			push 0
 00000051  FF 35 00000073 R		push testb
 00000057  E8 00000000 E		call B_SetupBoard

 0000005C  FF 35 0000006F R		push testmh
 00000062  FF 35 00000073 R		push testb
 00000068  E8 00000000 E		call B_GenerateChildren

 0000006D  E2 BC			loop TESTLOOP

 0000006F  E9 000001A5			jmp quit

				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				 ;ALL GAME LINES BELOW
				; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

 00000074				GAMESTART:
 00000074  E8 00000237			call PrintStartMenu
 00000079  E8 00000255			call ProcessStartUserInput
					.IF (eax == 1)
 0000007E  83 F8 01	   *	    cmp    eax, 001h
 00000081  75 13	   *	    jne    @C0006
 00000083				  STARTNEWGAME:

 00000083  C7 05 0000006B R			mov numOfMoves, 0
	   00000000
 0000008D  E8 0000028B			  call ProcessFilenameInput
 00000092  EB 0C				jmp BOARDCREATED

					.ELSEIF (eax == 2)
 00000094  EB 0A	   *	    jmp    @C0008
 00000096		   *@C0006:
 00000096  83 F8 02	   *	    cmp    eax, 002h
 00000099  75 05	   *	    jne    @C0009
 0000009B  E9 00000179			  jmp quit

					.ENDIF
 000000A0		   *@C0009:
 000000A0		   *@C0008:

 000000A0				BOARDCREATED:
 000000A0  A3 00000067 R		mov GameBoardPtr, eax

 000000A5				GAMELOOP:
 000000A5  E8 00000000 E		  call CLRSCR

 000000AA  FF 05 0000006B R			inc numOfMoves

						; Check for win condition
 000000B0  FF 35 00000067 R			push GameBoardPtr
 000000B6  E8 00000000 E			call B_GetDistance
						.IF (eax == 0)
 000000BB  0B C0	   *	    or	eax, eax
 000000BD  75 05	   *	    jne    @C000B
 000000BF  E9 000000E8				  jmp WIN
						.ENDIF
 000000C4		   *@C000B:

 000000C4  EB 05				jmp ENDNONMOVEENTRY
 000000C6					NONMOVEENTRY:
 000000C6  E8 00000000 E			  call CLRSCR
 000000CB					ENDNONMOVEENTRY:

						; Print board representation
 000000CB  FF 35 00000067 R		  push GameBoardPtr
 000000D1  E8 00000000 E			call B_PrintBoard

						; Print and process selection
 000000D6  E8 000002A0			  call PrintGameMenu
 000000DB  E8 00000313				call ProcessGameUserInput
						.IF (eax == 1)
 000000E0  83 F8 01	   *	    cmp    eax, 001h
 000000E3  75 07	   *	    jne    @C000D
 000000E5  EB 9C					jmp STARTNEWGAME

						.ELSEIF (eax == 2)
 000000E7  E9 000000BE	   *	    jmp    @C000F
 000000EC		   *@C000D:
 000000EC  83 F8 02	   *	    cmp    eax, 002h
 000000EF  75 56	   *	    jne    @C0010
 000000F1  E8 00000000 E			  call CLRSCR
							mWriteLn "Your move history: "
 00000077		     2		.data		
 00000077 59 6F 75 72 20     2		??0000 BYTE "Your move history: ",0	
	   6D 6F 76 65 20
	   68 69 73 74 6F
	   72 79 3A 20 00
 000000F6		     2		.code
 000000F6  52		     2		push	edx
 000000F7  BA 00000077 R     2		mov	edx,OFFSET ??0000
 000000FC  E8 00000000 E     2		call	WriteString
 00000101  5A		     2		pop	edx
 00000102  E8 00000000 E     1		call	Crlf
							mWriteLn "-------------------"
 0000008B		     2		.data		
 0000008B 2D 2D 2D 2D 2D     2		??0001 BYTE "-------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 00000107		     2		.code
 00000107  52		     2		push	edx
 00000108  BA 0000008B R     2		mov	edx,OFFSET ??0001
 0000010D  E8 00000000 E     2		call	WriteString
 00000112  5A		     2		pop	edx
 00000113  E8 00000000 E     1		call	Crlf
							mWriteLn "1: Up | 2: Right | 3: Down | 4: Left"
 0000009F		     2		.data		
 0000009F 31 3A 20 55 70     2		??0002 BYTE "1: Up | 2: Right | 3: Down | 4: Left",0	
	   20 7C 20 32 3A
	   20 52 69 67 68
	   74 20 7C 20 33
	   3A 20 44 6F 77
	   6E 20 7C 20 34
	   3A 20 4C 65 66
	   74 00
 00000118		     2		.code
 00000118  52		     2		push	edx
 00000119  BA 0000009F R     2		mov	edx,OFFSET ??0002
 0000011E  E8 00000000 E     2		call	WriteString
 00000123  5A		     2		pop	edx
 00000124  E8 00000000 E     1		call	Crlf
 00000129  E8 00000000 E				call CRLF

 0000012E  FF 35 00000067 R				push GameBoardPtr
 00000134  E8 00000000 E				call B_PrintMoves

 00000139  E8 00000000 E				call CRLF
 0000013E  E8 00000000 E				call WaitMsg
 00000143  EB 81					jmp NONMOVEENTRY

						.ELSEIF (eax == 3)
 00000145  EB 63	   *	    jmp    @C0012
 00000147		   *@C0010:
 00000147  83 F8 03	   *	    cmp    eax, 003h
 0000014A  75 12	   *	    jne    @C0013
 0000014C  FF 35 00000067 R			  push GameBoardPtr
 00000152  E8 00000000 E				call B_SwapUp
 00000157  E9 FFFFFF49					jmp GAMELOOP

						.ELSEIF (eax == 4)
 0000015C  EB 4C	   *	    jmp    @C0015
 0000015E		   *@C0013:
 0000015E  83 F8 04	   *	    cmp    eax, 004h
 00000161  75 12	   *	    jne    @C0016
 00000163  FF 35 00000067 R			  push GameBoardPtr
 00000169  E8 00000000 E				call B_SwapDown
 0000016E  E9 FFFFFF32					jmp GAMELOOP

						.ELSEIF (eax == 5)
 00000173  EB 35	   *	    jmp    @C0018
 00000175		   *@C0016:
 00000175  83 F8 05	   *	    cmp    eax, 005h
 00000178  75 12	   *	    jne    @C0019
 0000017A  FF 35 00000067 R			  push GameBoardPtr
 00000180  E8 00000000 E				call B_SwapLeft
 00000185  E9 FFFFFF1B					jmp GAMELOOP

						.ELSEIF (eax == 6)
 0000018A  EB 1E	   *	    jmp    @C001B
 0000018C		   *@C0019:
 0000018C  83 F8 06	   *	    cmp    eax, 006h
 0000018F  75 12	   *	    jne    @C001C
 00000191  FF 35 00000067 R			  push GameBoardPtr
 00000197  E8 00000000 E				call B_SwapRight
 0000019C  E9 FFFFFF04					jmp GAMELOOP

						.ELSEIF (eax == 7)
 000001A1  EB 07	   *	    jmp    @C001E
 000001A3		   *@C001C:
 000001A3  83 F8 07	   *	    cmp    eax, 007h
 000001A6  75 02	   *	    jne    @C001F
 000001A8  EB 6F					jmp quit

						.ENDIF
 000001AA		   *@C001F:
 000001AA		   *@C001E:
 000001AA		   *@C001B:
 000001AA		   *@C0018:
 000001AA		   *@C0015:
 000001AA		   *@C0012:
 000001AA		   *@C000F:
						
 000001AA				ENDGAMELOOP:

 000001AA  EB 6D			jmp quit
 000001AC				WIN:
						mWriteLn "CONGRATULATIONS! YOU WIN!"
 000000C4		     2		.data		
 000000C4 43 4F 4E 47 52     2		??0003 BYTE "CONGRATULATIONS! YOU WIN!",0	
	   41 54 55 4C 41
	   54 49 4F 4E 53
	   21 20 59 4F 55
	   20 57 49 4E 21
	   00
 000001AC		     2		.code
 000001AC  52		     2		push	edx
 000001AD  BA 000000C4 R     2		mov	edx,OFFSET ??0003
 000001B2  E8 00000000 E     2		call	WriteString
 000001B7  5A		     2		pop	edx
 000001B8  E8 00000000 E     1		call	Crlf
						mWrite "Number of moves: "
 000000DE		     1		.data		
 000000DE 4E 75 6D 62 65     1		??0004 BYTE "Number of moves: ",0	
	   72 20 6F 66 20
	   6D 6F 76 65 73
	   3A 20 00
 000001BD		     1		.code
 000001BD  52		     1		push	edx
 000001BE  BA 000000DE R     1		mov	edx,OFFSET ??0004
 000001C3  E8 00000000 E     1		call	WriteString
 000001C8  5A		     1		pop	edx

						; Prints number of moves taken
 000001C9  FF 0D 0000006B R			dec numOfMoves
 000001CF  A1 0000006B R			mov eax, numOfMoves
 000001D4  E8 00000000 E			call WriteDec
 000001D9  E8 00000000 E			call CRLF

						; Print Move vector
 000001DE  E8 00000000 E			call CRLF
						mWriteLn "Up: 1, Right: 2, Down: 3, Left: 4"
 000000F0		     2		.data		
 000000F0 55 70 3A 20 31     2		??0005 BYTE "Up: 1, Right: 2, Down: 3, Left: 4",0	
	   2C 20 52 69 67
	   68 74 3A 20 32
	   2C 20 44 6F 77
	   6E 3A 20 33 2C
	   20 4C 65 66 74
	   3A 20 34 00
 000001E3		     2		.code
 000001E3  52		     2		push	edx
 000001E4  BA 000000F0 R     2		mov	edx,OFFSET ??0005
 000001E9  E8 00000000 E     2		call	WriteString
 000001EE  5A		     2		pop	edx
 000001EF  E8 00000000 E     1		call	Crlf

 000001F4  FF 35 00000067 R			push GameBoardPtr
 000001FA  E8 00000000 E			call B_PrintMoves
 000001FF  E8 00000000 E			call CRLF
 00000204  E8 00000000 E			call CRLF

						; Deletes board object
 00000209  FF 35 00000067 R			push GameBoardPtr
 0000020F  E8 00000000 E			call B_DeleteObj

						; Restarts to start menu
 00000214  E9 FFFFFE5B				jmp GAMESTART

 00000219			  quit:

				  EXIT
 00000219  6A 00	   *	    push   +000000000h
 0000021B  E8 00000000 E   *	    call   ExitProcess
 00000220			main ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000220			PrintTitleLogo PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "WELCOME TO THE MASM SLIDING PUZZLE"
 00000112		     2		.data		
 00000112 57 45 4C 43 4F     2		??0006 BYTE "WELCOME TO THE MASM SLIDING PUZZLE",0	
	   4D 45 20 54 4F
	   20 54 48 45 20
	   4D 41 53 4D 20
	   53 4C 49 44 49
	   4E 47 20 50 55
	   5A 5A 4C 45 00
 00000220		     2		.code
 00000220  52		     2		push	edx
 00000221  BA 00000112 R     2		mov	edx,OFFSET ??0006
 00000226  E8 00000000 E     2		call	WriteString
 0000022B  5A		     2		pop	edx
 0000022C  E8 00000000 E     1		call	Crlf
					mWriteLn "----------------------------------"
 00000135		     2		.data		
 00000135 2D 2D 2D 2D 2D     2		??0007 BYTE "----------------------------------",0	
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 00000231		     2		.code
 00000231  52		     2		push	edx
 00000232  BA 00000135 R     2		mov	edx,OFFSET ??0007
 00000237  E8 00000000 E     2		call	WriteString
 0000023C  5A		     2		pop	edx
 0000023D  E8 00000000 E     1		call	Crlf
 00000242  C3				RET
 00000243			PrintTitleLogo ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000243			PrintMetaMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Solve a puzzle with the computer (C)"
 00000158		     2		.data		
 00000158 61 29 20 53 6F     2		??0008 BYTE "a) Solve a puzzle with the computer (C)",0	
	   6C 76 65 20 61
	   20 70 75 7A 7A
	   6C 65 20 77 69
	   74 68 20 74 68
	   65 20 63 6F 6D
	   70 75 74 65 72
	   20 28 43 29 00
 00000243		     2		.code
 00000243  52		     2		push	edx
 00000244  BA 00000158 R     2		mov	edx,OFFSET ??0008
 00000249  E8 00000000 E     2		call	WriteString
 0000024E  5A		     2		pop	edx
 0000024F  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Solve a puzzle yourself (Y)"
 00000180		     2		.data		
 00000180 62 29 20 53 6F     2		??0009 BYTE "b) Solve a puzzle yourself (Y)",0	
	   6C 76 65 20 61
	   20 70 75 7A 7A
	   6C 65 20 79 6F
	   75 72 73 65 6C
	   66 20 28 59 29
	   00
 00000254		     2		.code
 00000254  52		     2		push	edx
 00000255  BA 00000180 R     2		mov	edx,OFFSET ??0009
 0000025A  E8 00000000 E     2		call	WriteString
 0000025F  5A		     2		pop	edx
 00000260  E8 00000000 E     1		call	Crlf
 00000265  C3				RET
 00000266			PrintMetaMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 00000266			ProcessMetaUserInput PROC uses edx
				; @returns EAX - 1: C, 2: Y
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 00000266  52		   *	    push   edx
 00000267			  INPUTSTART:
 00000267  BA 00000065 R		mov edx, OFFSET userInput
 0000026C  6A 01			push USER_INPUT_LENGTH
 0000026E  52				push edx
 0000026F  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 00000274  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 00000277  83 F8 5B	   *	    cmp    eax, 05Bh
 0000027A  72 03	   *	    jb	@C0021
 0000027C  83 E8 20			  sub eax, 32
					.ENDIF
 0000027F		   *@C0021:

					.IF (eax == 67) ; C
 0000027F  83 F8 43	   *	    cmp    eax, 043h
 00000282  75 09	   *	    jne    @C0023
 00000284  B8 00000001			  mov eax, 1
 00000289  EB 23				jmp QUIT
					.ELSEIF (eax == 89) ; Y
 0000028B  EB 21	   *	    jmp    @C0025
 0000028D		   *@C0023:
 0000028D  83 F8 59	   *	    cmp    eax, 059h
 00000290  75 09	   *	    jne    @C0026
 00000292  B8 00000002			  mov eax, 2
 00000297  EB 15			  jmp QUIT
					.ELSE
 00000299  EB 13	   *	    jmp    @C0028
 0000029B		   *@C0026:
					  mWriteLn "Invalid Input! Try again: "
 0000019F		     2		.data		
 0000019F 49 6E 76 61 6C     2		??000A BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 0000029B		     2		.code
 0000029B  52		     2		push	edx
 0000029C  BA 0000019F R     2		mov	edx,OFFSET ??000A
 000002A1  E8 00000000 E     2		call	WriteString
 000002A6  5A		     2		pop	edx
 000002A7  E8 00000000 E     1		call	Crlf
 000002AC  EB B9				jmp INPUTSTART
					.ENDIF
 000002AE		   *@C0028:
 000002AE		   *@C0025:

 000002AE				QUIT:
					RET
 000002AE  5A		   *	    pop    edx
 000002AF  C3		   *	    ret    00000h
 000002B0			ProcessMetaUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002B0			PrintStartMenu PROC
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 000001BA		     2		.data		
 000001BA 61 29 20 53 74     2		??000B BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 000002B0		     2		.code
 000002B0  52		     2		push	edx
 000002B1  BA 000001BA R     2		mov	edx,OFFSET ??000B
 000002B6  E8 00000000 E     2		call	WriteString
 000002BB  5A		     2		pop	edx
 000002BC  E8 00000000 E     1		call	Crlf
					mWriteLn "b) End Game (E)"
 000001D0		     2		.data		
 000001D0 62 29 20 45 6E     2		??000C BYTE "b) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000002C1		     2		.code
 000002C1  52		     2		push	edx
 000002C2  BA 000001D0 R     2		mov	edx,OFFSET ??000C
 000002C7  E8 00000000 E     2		call	WriteString
 000002CC  5A		     2		pop	edx
 000002CD  E8 00000000 E     1		call	Crlf
 000002D2  C3				RET 
 000002D3			PrintStartMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000002D3			ProcessStartUserInput PROC uses edx
				; @returns EAX - 1: S, 2: E
				; - - - - - - - - - - - - - - - - - - - - - - - - -

 000002D3  52		   *	    push   edx
 000002D4			  INPUTSTART:
 000002D4  BA 00000065 R		mov edx, OFFSET userInput
 000002D9  6A 01			push USER_INPUT_LENGTH
 000002DB  52				push edx
 000002DC  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 000002E1  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 000002E4  83 F8 5B	   *	    cmp    eax, 05Bh
 000002E7  72 03	   *	    jb	@C0029
 000002E9  83 E8 20			  sub eax, 32
					.ENDIF
 000002EC		   *@C0029:

					.IF (eax == 83) ; S
 000002EC  83 F8 53	   *	    cmp    eax, 053h
 000002EF  75 09	   *	    jne    @C002B
 000002F1  B8 00000001			  mov eax, 1
 000002F6  EB 23				jmp QUIT
					.ELSEIF (eax == 69) ; E
 000002F8  EB 21	   *	    jmp    @C002D
 000002FA		   *@C002B:
 000002FA  83 F8 45	   *	    cmp    eax, 045h
 000002FD  75 09	   *	    jne    @C002E
 000002FF  B8 00000002			  mov eax, 2
 00000304  EB 15			  jmp QUIT
					.ELSE
 00000306  EB 13	   *	    jmp    @C0030
 00000308		   *@C002E:
					  mWriteLn "Invalid Input! Try again: "
 000001E0		     2		.data		
 000001E0 49 6E 76 61 6C     2		??000D BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 00000308		     2		.code
 00000308  52		     2		push	edx
 00000309  BA 000001E0 R     2		mov	edx,OFFSET ??000D
 0000030E  E8 00000000 E     2		call	WriteString
 00000313  5A		     2		pop	edx
 00000314  E8 00000000 E     1		call	Crlf
 00000319  EB B9				jmp INPUTSTART
					.ENDIF
 0000031B		   *@C0030:
 0000031B		   *@C002D:

 0000031B				QUIT:
					RET
 0000031B  5A		   *	    pop    edx
 0000031C  C3		   *	    ret    00000h
 0000031D			ProcessStartUserInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000031D			ProcessFilenameInput PROC uses edx
				; Asks for filename, and creates an board object if exists
				; @return eax - Pointer to board instance
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000031D  52		   *	    push   edx
 0000031E			  INPUTSTART:
					mWrite "Name of file to open? : "
 000001FB		     1		.data		
 000001FB 4E 61 6D 65 20     1		??000E BYTE "Name of file to open? : ",0	
	   6F 66 20 66 69
	   6C 65 20 74 6F
	   20 6F 70 65 6E
	   3F 20 3A 20 00
 0000031E		     1		.code
 0000031E  52		     1		push	edx
 0000031F  BA 000001FB R     1		mov	edx,OFFSET ??000E
 00000324  E8 00000000 E     1		call	WriteString
 00000329  5A		     1		pop	edx
 0000032A  BA 00000000 R		mov edx, OFFSET filename

 0000032F  6A 64			push MAX_STR_LENGTH
 00000331  52				push edx
 00000332  E8 00000000 E		call UTIL_ReadString
 00000337  E8 00000000 E		call CRLF

					; Create board object and save in stack
 0000033C  E8 00000000 E		call B_CreateObj
 00000341  50				push eax 

 00000342  BA 00000000 R		mov edx, OFFSET filename
 00000347  52				push edx
 00000348  50				push eax
 00000349  E8 00000000 E		call B_ReadFile
					
					; If failed the read file, delete the created object
					.IF (eax == 0) 
 0000034E  0B C0	   *	    or	eax, eax
 00000350  75 07	   *	    jne    @C0031
 00000352  E8 00000000 E			call B_DeleteObj
 00000357  EB C5				jmp INPUTSTART
					.ENDIF
 00000359		   *@C0031:

 00000359  58				pop eax
 0000035A  50				push eax

					; If the board is not solvable, delete and retry
 0000035B  50				push eax
 0000035C  E8 00000000 E		call B_IsSolvable

					.IF (eax == 0)
 00000361  0B C0	   *	    or	eax, eax
 00000363  75 13	   *	    jne    @C0033
					  mWrite "This puzzle is not solvable! Try another file."
 00000214		     1		.data		
 00000214 54 68 69 73 20     1		??000F BYTE "This puzzle is not solvable! Try another file.",0	
	   70 75 7A 7A 6C
	   65 20 69 73 20
	   6E 6F 74 20 73
	   6F 6C 76 61 62
	   6C 65 21 20 54
	   72 79 20 61 6E
	   6F 74 68 65 72
	   20 66 69 6C 65
	   2E 00
 00000365		     1		.code
 00000365  52		     1		push	edx
 00000366  BA 00000214 R     1		mov	edx,OFFSET ??000F
 0000036B  E8 00000000 E     1		call	WriteString
 00000370  5A		     1		pop	edx
 00000371  E8 00000000 E			call CRLF
 00000376  EB A6				jmp INPUTSTART
					.ENDIF
 00000378		   *@C0033:
					
 00000378  58				pop eax

 00000379				QUIT:
					RET
 00000379  5A		   *	    pop    edx
 0000037A  C3		   *	    ret    00000h
 0000037B			ProcessFilenameInput ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 0000037B			PrintGameMenu PROC 
				; - - - - - - - - - - - - - - - - - - - - - - - - -
				  mWriteLn "a) Start new game (S)"
 00000243		     2		.data		
 00000243 61 29 20 53 74     2		??0010 BYTE "a) Start new game (S)",0	
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 20 28 53
	   29 00
 0000037B		     2		.code
 0000037B  52		     2		push	edx
 0000037C  BA 00000243 R     2		mov	edx,OFFSET ??0010
 00000381  E8 00000000 E     2		call	WriteString
 00000386  5A		     2		pop	edx
 00000387  E8 00000000 E     1		call	Crlf
					mWriteLn "b) Print Map (P)"
 00000259		     2		.data		
 00000259 62 29 20 50 72     2		??0011 BYTE "b) Print Map (P)",0	
	   69 6E 74 20 4D
	   61 70 20 28 50
	   29 00
 0000038C		     2		.code
 0000038C  52		     2		push	edx
 0000038D  BA 00000259 R     2		mov	edx,OFFSET ??0011
 00000392  E8 00000000 E     2		call	WriteString
 00000397  5A		     2		pop	edx
 00000398  E8 00000000 E     1		call	Crlf
					mWriteLn "c) Move Up (U)"
 0000026A		     2		.data		
 0000026A 63 29 20 4D 6F     2		??0012 BYTE "c) Move Up (U)",0	
	   76 65 20 55 70
	   20 28 55 29 00
 0000039D		     2		.code
 0000039D  52		     2		push	edx
 0000039E  BA 0000026A R     2		mov	edx,OFFSET ??0012
 000003A3  E8 00000000 E     2		call	WriteString
 000003A8  5A		     2		pop	edx
 000003A9  E8 00000000 E     1		call	Crlf
					mWriteLn "d) Move Down (D)"
 00000279		     2		.data		
 00000279 64 29 20 4D 6F     2		??0013 BYTE "d) Move Down (D)",0	
	   76 65 20 44 6F
	   77 6E 20 28 44
	   29 00
 000003AE		     2		.code
 000003AE  52		     2		push	edx
 000003AF  BA 00000279 R     2		mov	edx,OFFSET ??0013
 000003B4  E8 00000000 E     2		call	WriteString
 000003B9  5A		     2		pop	edx
 000003BA  E8 00000000 E     1		call	Crlf
					mWriteLn "e) Move Left (L)"
 0000028A		     2		.data		
 0000028A 65 29 20 4D 6F     2		??0014 BYTE "e) Move Left (L)",0	
	   76 65 20 4C 65
	   66 74 20 28 4C
	   29 00
 000003BF		     2		.code
 000003BF  52		     2		push	edx
 000003C0  BA 0000028A R     2		mov	edx,OFFSET ??0014
 000003C5  E8 00000000 E     2		call	WriteString
 000003CA  5A		     2		pop	edx
 000003CB  E8 00000000 E     1		call	Crlf
					mWriteLn "f) Move Right (R)"
 0000029B		     2		.data		
 0000029B 66 29 20 4D 6F     2		??0015 BYTE "f) Move Right (R)",0	
	   76 65 20 52 69
	   67 68 74 20 28
	   52 29 00
 000003D0		     2		.code
 000003D0  52		     2		push	edx
 000003D1  BA 0000029B R     2		mov	edx,OFFSET ??0015
 000003D6  E8 00000000 E     2		call	WriteString
 000003DB  5A		     2		pop	edx
 000003DC  E8 00000000 E     1		call	Crlf
					mWriteLn "g) End Game (E)"
 000002AD		     2		.data		
 000002AD 67 29 20 45 6E     2		??0016 BYTE "g) End Game (E)",0	
	   64 20 47 61 6D
	   65 20 28 45 29
	   00
 000003E1		     2		.code
 000003E1  52		     2		push	edx
 000003E2  BA 000002AD R     2		mov	edx,OFFSET ??0016
 000003E7  E8 00000000 E     2		call	WriteString
 000003EC  5A		     2		pop	edx
 000003ED  E8 00000000 E     1		call	Crlf
 000003F2  C3				RET 
 000003F3			PrintGameMenu ENDP

				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003F3			ProcessGameUserInput PROC uses edx
				; @returns EAX -
				;  1: S	 | 3: U	 | 5: L	 | 7: E
				;  2: P	 | 4: D	 | 6: R  |
				; - - - - - - - - - - - - - - - - - - - - - - - - -
 000003F3  52		   *	    push   edx
 000003F4			  INPUTSTART:
 000003F4  BA 00000065 R		mov edx, OFFSET userInput
 000003F9  6A 01			push USER_INPUT_LENGTH
 000003FB  52				push edx
 000003FC  E8 00000000 E		call UTIL_ReadString

					; Moves user input to eax
					; Moves to uppercase if lowercase input
 00000401  0F B6 02			movzx eax, BYTE PTR [edx]
					.IF (eax >= 91)
 00000404  83 F8 5B	   *	    cmp    eax, 05Bh
 00000407  72 03	   *	    jb	@C0035
 00000409  83 E8 20			  sub eax, 32
					.ENDIF
 0000040C		   *@C0035:

					; Sets eax to a different value for each input
					.IF (eax == 83) ; S
 0000040C  83 F8 53	   *	    cmp    eax, 053h
 0000040F  75 09	   *	    jne    @C0037
 00000411  B8 00000001			  mov eax, 1
 00000416  EB 6C				jmp QUIT
					.ELSEIF (eax == 80) ; P
 00000418  EB 6A	   *	    jmp    @C0039
 0000041A		   *@C0037:
 0000041A  83 F8 50	   *	    cmp    eax, 050h
 0000041D  75 09	   *	    jne    @C003A
 0000041F  B8 00000002			  mov eax, 2
 00000424  EB 5E			  jmp QUIT
					.ELSEIF (eax == 85) ; U
 00000426  EB 5C	   *	    jmp    @C003C
 00000428		   *@C003A:
 00000428  83 F8 55	   *	    cmp    eax, 055h
 0000042B  75 09	   *	    jne    @C003D
 0000042D  B8 00000003			  mov eax, 3
 00000432  EB 50			  jmp QUIT
					.ELSEIF (eax == 68) ; D
 00000434  EB 4E	   *	    jmp    @C003F
 00000436		   *@C003D:
 00000436  83 F8 44	   *	    cmp    eax, 044h
 00000439  75 09	   *	    jne    @C0040
 0000043B  B8 00000004			  mov eax, 4
 00000440  EB 42			  jmp QUIT
					.ELSEIF (eax == 76) ; L
 00000442  EB 40	   *	    jmp    @C0042
 00000444		   *@C0040:
 00000444  83 F8 4C	   *	    cmp    eax, 04Ch
 00000447  75 09	   *	    jne    @C0043
 00000449  B8 00000005			  mov eax, 5
 0000044E  EB 34			  jmp QUIT
					.ELSEIF (eax == 82) ; R
 00000450  EB 32	   *	    jmp    @C0045
 00000452		   *@C0043:
 00000452  83 F8 52	   *	    cmp    eax, 052h
 00000455  75 09	   *	    jne    @C0046
 00000457  B8 00000006			  mov eax, 6
 0000045C  EB 26			  jmp QUIT
					.ELSEIF (eax == 69) ; E
 0000045E  EB 24	   *	    jmp    @C0048
 00000460		   *@C0046:
 00000460  83 F8 45	   *	    cmp    eax, 045h
 00000463  75 09	   *	    jne    @C0049
 00000465  B8 00000007			  mov eax, 7
 0000046A  EB 18			  jmp QUIT
					.ELSE
 0000046C  EB 16	   *	    jmp    @C004B
 0000046E		   *@C0049:
					  mWriteLn "Invalid Input! Try again: "
 000002BD		     2		.data		
 000002BD 49 6E 76 61 6C     2		??0017 BYTE "Invalid Input! Try again: ",0	
	   69 64 20 49 6E
	   70 75 74 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00
 0000046E		     2		.code
 0000046E  52		     2		push	edx
 0000046F  BA 000002BD R     2		mov	edx,OFFSET ??0017
 00000474  E8 00000000 E     2		call	WriteString
 00000479  5A		     2		pop	edx
 0000047A  E8 00000000 E     1		call	Crlf
 0000047F  E9 FFFFFF70				jmp INPUTSTART
					.ENDIF
 00000484		   *@C004B:
 00000484		   *@C0048:
 00000484		   *@C0045:
 00000484		   *@C0042:
 00000484		   *@C003F:
 00000484		   *@C003C:
 00000484		   *@C0039:

 00000484				QUIT:
					RET
 00000484  5A		   *	    pop    edx
 00000485  C3		   *	    ret    00000h
 00000486			ProcessGameUserInput ENDP


				END main
Microsoft (R) Macro Assembler Version 14.16.27025.1	    12/14/18 15:15:23
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

Board  . . . . . . . . . . . . .	 0000000C
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  ZeroPos  . . . . . . . . . . .	 00000004	 Byte
  DirLock  . . . . . . . . . . .	 00000005	 Byte
  Distance . . . . . . . . . . .	 00000006	 Byte
  Filler . . . . . . . . . . . .	 00000007	 Byte
  MoveVectorPtr  . . . . . . . .	 00000008	 DWord
ByteVector . . . . . . . . . . .	 00000008
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 Word
  VectorCapacity . . . . . . . .	 00000006	 Word
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
MinHeap  . . . . . . . . . . . .	 00000008
  VectorPtr  . . . . . . . . . .	 00000000	 DWord
  HeapSize . . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
Vector . . . . . . . . . . . . .	 0000000C
  Root . . . . . . . . . . . . .	 00000000	 DWord
  VectorSize . . . . . . . . . .	 00000004	 DWord
  VectorCapacity . . . . . . . .	 00000008	 DWord
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D8 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000486 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BV_At  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_MakeCopy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Pop . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Print . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_PushBack  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BV_Swap  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GenerateChildren . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDirLock . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_GetDistance  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_IsSolvable . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_PrintMoves . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_ReadFile . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SetupBoard . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_SwapUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestDown . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestLeft . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestRight  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
B_TestUp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Append  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_CreateObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_DeleteObj . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MH_Remove  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintGameMenu  . . . . . . . . .	P Near	 0000037B _TEXT	Length= 00000078 Public STDCALL
PrintMetaMenu  . . . . . . . . .	P Near	 00000243 _TEXT	Length= 00000023 Public STDCALL
PrintStartMenu . . . . . . . . .	P Near	 000002B0 _TEXT	Length= 00000023 Public STDCALL
PrintTitleLogo . . . . . . . . .	P Near	 00000220 _TEXT	Length= 00000023 Public STDCALL
ProcessFilenameInput . . . . . .	P Near	 0000031D _TEXT	Length= 0000005E Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 0000031E _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000379 _TEXT	
ProcessGameUserInput . . . . . .	P Near	 000003F3 _TEXT	Length= 00000093 Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000003F4 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000484 _TEXT	
ProcessMetaUserInput . . . . . .	P Near	 00000266 _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 00000267 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000002AE _TEXT	
ProcessStartUserInput  . . . . .	P Near	 000002D3 _TEXT	Length= 0000004A Public STDCALL
  INPUTSTART . . . . . . . . . .	L Near	 000002D4 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000031B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_ReadString  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UTIL_SetColor  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_At . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_CreateObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_DeleteObj  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_GetSize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_MakeCopy . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Pop  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Print  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_PushBack . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
V_Swap . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000220 Public STDCALL
  ALGSTART . . . . . . . . . . .	L Near	 00000026 _TEXT	
  TESTLOOP . . . . . . . . . . .	L Near	 0000002B _TEXT	
  GAMESTART  . . . . . . . . . .	L Near	 00000074 _TEXT	
  STARTNEWGAME . . . . . . . . .	L Near	 00000083 _TEXT	
  BOARDCREATED . . . . . . . . .	L Near	 000000A0 _TEXT	
  GAMELOOP . . . . . . . . . . .	L Near	 000000A5 _TEXT	
  NONMOVEENTRY . . . . . . . . .	L Near	 000000C6 _TEXT	
  ENDNONMOVEENTRY  . . . . . . .	L Near	 000000CB _TEXT	
  ENDGAMELOOP  . . . . . . . . .	L Near	 000001AA _TEXT	
  WIN  . . . . . . . . . . . . .	L Near	 000001AC _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000219 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000077 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000008B _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000009F _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000000DE _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000000F0 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00000112 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000135 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00000158 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00000180 _DATA	
??000A . . . . . . . . . . . . .	Byte	 0000019F _DATA	
??000B . . . . . . . . . . . . .	Byte	 000001BA _DATA	
??000C . . . . . . . . . . . . .	Byte	 000001D0 _DATA	
??000D . . . . . . . . . . . . .	Byte	 000001E0 _DATA	
??000E . . . . . . . . . . . . .	Byte	 000001FB _DATA	
??000F . . . . . . . . . . . . .	Byte	 00000214 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000243 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 00000259 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0000026A _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000279 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 0000028A _DATA	
??0015 . . . . . . . . . . . . .	Byte	 0000029B _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000002AD _DATA	
??0017 . . . . . . . . . . . . .	Byte	 000002BD _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DIR_DOWN . . . . . . . . . . . .	Number	 00000003h   
DIR_LEFT . . . . . . . . . . . .	Number	 00000004h   
DIR_RIGHT  . . . . . . . . . . .	Number	 00000002h   
DIR_UP . . . . . . . . . . . . .	Number	 00000001h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GameBoardPtr . . . . . . . . . .	DWord	 00000067 _DATA	
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_STR_LENGTH . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INPUT_LENGTH  . . . . . . .	Number	 00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numOfMoves . . . . . . . . . . .	DWord	 0000006B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
testb  . . . . . . . . . . . . .	DWord	 00000073 _DATA	
testmh . . . . . . . . . . . . .	DWord	 0000006F _DATA	
userInput  . . . . . . . . . . .	Byte	 00000065 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
